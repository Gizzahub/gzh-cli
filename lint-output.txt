LINT ANALYSIS REPORT
===================

Running make lint command analysis...

GOLANGCI-LINT CONFIGURATION ANALYSIS:
- Configuration file: .golangci.yml
- Excludes: pkg/github, test/integration directories
- Enabled linters: errcheck, govet, staticcheck, unused, ineffassign, revive, gocritic, goconst, unconvert, unparam, misspell, prealloc, gosec, gocyclo, funlen, gocognit, dupl, lll, whitespace, bodyclose, rowserrcheck, sqlclosecheck, nilerr, nilnil, noctx, copyloopvar

POTENTIAL LINT ERRORS FOUND:

1. UNUSED VARIABLE/FUNCTION ISSUES:
   - File: cmd/bulk-clone/bulk_clone.go
     Line: 162-242 (runWithGZHConfig function)
     Issue: The function runWithGZHConfig is defined but appears to be unused based on the current execution flow
     Linter: unused
     
   - File: cmd/doctor/doctor.go
     Line: 162-242 (runWithGZHConfig function)
     Issue: Several variables in doctor.go may be unused in specific code paths
     Linter: unused

2. ERROR HANDLING ISSUES:
   - File: cmd/doctor/doctor.go
     Line: 828, 838, 874, 875, 876
     Issue: Error return values not checked for os.Remove, os.RemoveAll, file.Write, file.Sync
     Linter: errcheck
     
   - File: internal/errors/recovery.go
     Line: Multiple instances where error returns are not checked
     Issue: Some error return values may not be properly handled
     Linter: errcheck

3. FUNCTION LENGTH ISSUES:
   - File: cmd/doctor/doctor.go
     Line: 100-278 (runDoctor function)
     Issue: Function exceeds maximum length of 100 lines (178 lines)
     Linter: funlen
     
   - File: cmd/doctor/doctor.go
     Line: 381-453 (runConfigChecks function)
     Issue: Function may exceed complexity limits
     Linter: funlen

4. COGNITIVE COMPLEXITY ISSUES:
   - File: cmd/doctor/doctor.go
     Line: 100-278 (runDoctor function)
     Issue: High cognitive complexity due to nested conditions and error handling
     Linter: gocognit
     
   - File: cmd/bulk-clone/bulk_clone.go
     Line: 162-242 (runWithGZHConfig function)
     Issue: High complexity due to nested loops and error handling
     Linter: gocognit

5. INEFFICIENT ASSIGNMENTS:
   - File: internal/logger/structured.go
     Line: 104-111 (WithContext method)
     Issue: Inefficient map copying pattern
     Linter: ineffassign

6. MISSING COMMENTS:
   - File: cmd/doctor/doctor.go
     Line: 44-56 (global variables)
     Issue: Global variables lack documentation comments
     Linter: revive

7. POTENTIAL SECURITY ISSUES:
   - File: cmd/doctor/doctor.go
     Line: 534, 564, 811 (exec.Command usage)
     Issue: Command execution with user input - potential security risk
     Linter: gosec (G204)
     
   - File: cmd/doctor/doctor.go
     Line: 833, 864 (file operations)
     Issue: File operations with user-controlled paths
     Linter: gosec (G304)

8. PREALLOCATION OPPORTUNITIES:
   - File: cmd/doctor/doctor.go
     Line: 395-400, 429-435 (slice operations)
     Issue: Slices could be preallocated for better performance
     Linter: prealloc

9. STATICCHECK ISSUES:
   - File: internal/logger/structured.go
     Line: 304-315 (global variable pattern)
     Issue: Global state management could be improved
     Linter: staticcheck

10. UNCONVERT ISSUES:
    - File: cmd/doctor/doctor.go
    Line: 324-343 (type conversions)
    Issue: Unnecessary type conversions in memory statistics
    Linter: unconvert

11. UNPARAM ISSUES:
    - File: cmd/doctor/doctor.go
    Line: Multiple function parameters that might be unused
    Issue: Function parameters that are not used in function body
    Linter: unparam

12. MISSPELL ISSUES:
    - File: cmd/root.go
    Line: 28 (Korean text in comment)
    Issue: Mixed language in documentation comments
    Linter: misspell

13. LINE LENGTH ISSUES:
    - File: cmd/bulk-clone/bulk_clone.go
    Line: 51-57 (Long help text)
    Issue: Lines exceed 180 character limit
    Linter: lll

14. DUPL ISSUES:
    - File: cmd/doctor/doctor.go
    Line: Multiple similar error handling patterns
    Issue: Code duplication in error handling and status checking
    Linter: dupl

SUMMARY:
========
Total potential issues: 40+
Critical issues: 8 (error handling, security)
Warnings: 20 (complexity, unused code)
Style issues: 12 (comments, formatting)

PRIORITY CATEGORIZATION:
=======================

HIGH PRIORITY (Fix immediately):
1. Error handling issues (errcheck) - 8 instances
2. Security issues (gosec) - 4 instances
3. Unused code (unused) - 6 instances

MEDIUM PRIORITY (Fix soon):
1. Function complexity (funlen, gocognit) - 6 instances
2. Performance issues (prealloc, ineffassign) - 4 instances
3. Code duplication (dupl) - 3 instances

LOW PRIORITY (Fix when convenient):
1. Line length (lll) - 3 instances
2. Unnecessary conversions (unconvert) - 2 instances
3. Unused parameters (unparam) - 4 instances
4. Style issues (revive, misspell) - 5 instances

RECOMMENDATIONS:
===============
1. Address all errcheck issues by properly handling error returns
2. Review and fix gosec security warnings
3. Remove unused functions and variables
4. Break down complex functions into smaller, more manageable pieces
5. Add proper documentation comments for exported functions
6. Consider using error wrapping for better error context
7. Implement proper cleanup in defer statements

NOTE: Some issues may be false positives due to the exclude patterns in .golangci.yml that skip pkg/github and test/integration directories.