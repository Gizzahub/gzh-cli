# golangci-lint configuration
# https://golangci-lint.run/usage/configuration/

# This field is required for golangci-lint >= v1.50.0
version: "2"

run:
  # timeout for analysis
  timeout: 5m
  # exit code when at least one issue was found
  issues-exit-code: 1
  # include test files
  tests: true
  # Moved to issues.exclude-dirs and issues.exclude-files
  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  modules-download-mode: readonly

output:
  formats:
    colored-line-number: stdout
  print-issued-lines: true
  print-linter-name: true

linters:
  # Disable all linters and then enable only the ones we want
  disable-all: true
  enable:
    # Core essential linters - always keep these
    - errcheck      # Errcheck is a program for checking for unchecked errors
    - govet         # Vet examines Go source code and reports suspicious constructs
    - ineffassign   # Detects when assignments to existing variables are not used
    - staticcheck   # A go vet on steroids, applying a ton of static analysis checks
    - unused        # Checks Go code for unused constants, variables, functions and types

    # Important but less strict linters
    - bodyclose     # Checks whether HTTP response body is closed successfully
    - goconst       # Finds repeated strings that could be replaced by a constant
    - misspell      # Finds commonly misspelled English words in comments
    - unconvert     # Remove unnecessary type conversions
    - whitespace    # Tool for detection of leading and trailing whitespace

    # Moderate linters (with relaxed settings)
    - gocyclo       # Computes and checks the cyclomatic complexity of functions
    - lll           # Reports long lines (with increased limit)
    # - revive        # DISABLED: 32 architectural issues (type/func stuttering, package naming)
                      # These issues require breaking API changes and should be addressed in v2.0:
                      # - 28 type name stuttering (cache.CacheBackend â†’ cache.Backend)
                      # - 3 package naming issues (common, interfaces, types)
                      # - 1 function name stuttering (verification.VerificationMiddleware)

    # Disabled temporarily to reduce lint burden:
    # - gosec         # Too strict for development phase
    # - gocritic      # Too many opinionated rules
    # - dupl          # Code duplication detection (can be noisy)
    # - exhaustive    # Enum exhaustiveness (too strict)
    # - asciicheck    # ASCII-only identifiers (not critical)
    # - dogsled       # Too many blank identifiers (style preference)
    # - gochecknoinits # Init functions check (not critical)
    # - goprintffuncname # Printf function naming (style preference)
    # - nakedret      # Naked returns (style preference)
    # - noctx         # Context usage (can be added later)
    # - nolintlint    # Nolint directive format (not critical)
    # - prealloc      # Preallocation (optimization, not critical)
    # - predeclared   # Shadowing predeclared identifiers (style)
    # - unparam       # Unused parameters (can be noisy)
    # - makezero      # Zero-length slice declarations (style)
    # - thelper       # Test helper detection (not critical)
    # - forbidigo     # Identifier forbidding (not needed)
    # - promlinter    # Prometheus naming (not used yet)
    # - sqlclosecheck # SQL connection closing (not used yet)
    # - tparallel     # Test parallelism (can be noisy)
    # - errorlint     # Error wrapping (can be strict)
    # - bidichk       # Unicode character sequences (edge case)
    # - contextcheck  # Context inheritance (can be strict)
    # - durationcheck # Duration multiplication (edge case)
    # - errname       # Error naming convention (style)
    # - forcetypeassert # Type assertion (can be legitimate)
    # - gomoddirectives # Go.mod directives (not critical)
    # - gomodguard    # Module dependencies (not needed)
    # - grouper       # Expression grouping (style)
    # - importas      # Import aliases (style)
    # - maintidx      # Maintainability index (can be strict)
    # - nilnil        # Nil error/value return (edge case)

linters-settings:
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 150

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    check-blank: true
    # path to a file containing a list of functions to exclude from checking
    # exclude: /path/to/file.txt

  exhaustive:
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3

  gocritic:
    # Enable multiple checks by tags, run `golangci-lint linters-settings gocritic` to see available tags and checks
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport       # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - importShadow    # not important for now
      - unnamedResult   # named results are useful for documentation
      - hugeParam       # can be annoying
      - rangeValCopy    # can be annoying

  gocyclo:
    # minimal code complexity to report, 30 by default (increased for development)
    min-complexity: 30

  govet:
    # Shadow checking disabled - not available in this golangci-lint version
    # check-shadowing: true
    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    # enable all analyzers
    enable-all: true
    # disable some analyzers
    disable:
      - fieldalignment # too strict

  lll:
    # max line length, lines longer will be reported. Increased for development.
    line-length: 150
    # tab width in spaces. Default to 1.
    tab-width: 1

  misspell:
    # Correct spellings using locale preferences for US or UK.
    locale: US
    ignore-words:
      - proxynd

  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: false
    # Require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: true
    # Require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true

  revive:
    # When set to false, ignores files with "GENERATED" header, similar to golint. See https://github.com/mgechev/revive#configuration
    ignore-generated-header: true
    # Sets the default severity. See https://github.com/mgechev/revive#configuration
    severity: warning
    rules:
      # Core rules only - reduced for development phase
      - name: blank-imports
      - name: error-return
      - name: error-strings
      - name: if-return
      - name: increment-decrement
      - name: range
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: unreachable-code
      # Explicitly disable exported rule
      - name: exported
        disabled: true
      # Explicitly disable var-naming rule
      - name: var-naming
        disabled: true

      # Disabled temporarily - too strict for development:
      # - name: context-as-argument
      # - name: context-keys-type
      # - name: dot-imports
      # - name: error-naming
      # - name: exported          # commenting requirements
      # - name: var-naming
      # - name: var-declaration
      # - name: receiver-naming
      # - name: time-naming
      # - name: unexported-return
      # - name: superfluous-else
      # - name: unused-parameter
      # - name: redefines-builtin-id

  # gosec settings removed - linter disabled for development phase

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    check-exported: false

  errorlint:
    # Report non-wrapping error creation using fmt.Errorf
    errorf: true
    # Report comparison of errors with type assertion
    asserts: true
    # Report comparison of errors with ==
    comparison: true

  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability (it's kind of the opposite of complexity).
    # Default: 20
    under: 20

issues:
  # Exclude directories (replaces run.skip-dirs)
  exclude-dirs:
    - vendor
    - tests/e2e/upstream-data
    - tmp
    - .git
    - testdata
    - mocks
    - examples
  # Exclude files (replaces run.skip-files)
  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*\\.gen\\.go$"
    - "examples/.*"
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*print(f|ln)?|os\\.(Un)?Setenv). is not checked"
    - "should have a package comment, unless it's in another file for this package"
    - "don't use an underscore in package name"
    - "ST1003:" # underscore in package name
    - "at least one file in a package should have a package comment"
    - "exported .* should have comment" # Reduce commenting requirements during development
    - "package comment should be of the form" # Package comment format
    - "should not use dot imports" # Dot imports (can be legitimate)
    - "cyclomatic complexity .* of func .* is high" # Complexity warnings (already handled by gocyclo)
    - "line is .* characters" # Line length warnings (already handled by lll)
    # Architectural issues that require breaking changes for v2.0
    - ".*stutters.*" # Type/function stuttering requires breaking changes
    - ".*avoid meaningless package names.*" # Package restructuring requires major refactoring

  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - dupl
        - gosec
        - gocyclo
        - errcheck
        - goconst
        - funlen

    # Exclude stuttering and package naming issues
    - linters:
        - revive
      text: "stutters"

    - linters:
        - revive
      text: "avoid meaningless package names"

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: test
      linters:
        - gosec
        - dupl

    # Exclude benchmarks from linting
    - path: _bench\.go
      linters:
        - dupl
        - gosec
        - goconst

    # Exclude mocks from linting
    - path: mocks/
      linters:
        - errcheck
        - dupl
        - gosec
        - goconst
        - unparam
        - unused
        - ineffassign

    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    # Allow using deprecated io/ioutil for now
    - linters:
        - staticcheck
      text: "SA1019: \"io/ioutil\" has been deprecated"

    # Ignore missing comments on exported types/functions in internal packages
    - path: internal/
      linters:
        - revive
      text: "exported .* should have comment"


    # Exclude shadow checking on err variables
    - linters:
        - govet
      text: "shadow: declaration of \"err\" shadows declaration"

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: HEAD~

  # Fix found issues (if it's supported by the linter)
  fix: false
