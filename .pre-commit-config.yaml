# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# Configuration
default_language_version:
  golang: 1.23.0

# Only run on commit (not push)
default_stages: [pre-commit]

# Don't stop on first failure
fail_fast: false

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Remove trailing whitespace
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]

      # Ensure files end with a newline
      - id: end-of-file-fixer
        exclude: ^(vendor/|testdata/|examples/)

      # Check yaml files (exclude problematic examples)
      - id: check-yaml
        args: [--allow-multiple-documents]
        exclude: ^(helm/|k8s/|examples/)

      # Prevent large files from being committed
      - id: check-added-large-files
        args: ['--maxkb=1000']

      # Check for merge conflicts
      - id: check-merge-conflict

      # Check json files (exclude .vscode with comments)
      - id: check-json
        exclude: ^(vendor/|testdata/|\.devcontainer/|\.vscode/)

      # Detect private keys (exclude test files)
      - id: detect-private-key
        exclude: (cmd/license-gen/main.go|.*_test\.go)

      # Ensure consistent line endings
      - id: mixed-line-ending
        args: [--fix=lf]

  # Go specific hooks
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      # Format Go code
      - id: go-fmt

      # Organize imports
      - id: go-imports
        args: [-w, -local, github.com/gizzahub/gzh-manager-go]

      # Run go vet (exclude tools directory with build constraints)
      - id: go-vet
        exclude: ^tools/

      # Ensure go.mod is tidy
      - id: go-mod-tidy

  # Local custom checks
  - repo: local
    hooks:
      # Check for go.mod replace directives (should not be in production)
      - id: go-no-replacement
        name: Check for go.mod replacements
        entry: bash -c '! grep -q "^replace" go.mod || (echo "go.mod contains replace directives" && exit 1)'
        language: system
        files: go.mod

      # TODO: Mock 생성 설정 정리 후 활성화 (make generate-mocks 사용 권장)
      # Ensure generated files are committed
      # - id: go-generate
      #   name: Check go generate
      #   entry: bash -c 'go generate ./... && git diff --exit-code'
      #   language: system
      #   files: \.go$
      #   pass_filenames: false

      # TODO: 구조화된 로깅으로 마이그레이션 후 활성화
      # Check for problematic patterns
      # - id: check-fmt-print
      #   name: Check for fmt.Print statements
      #   entry: bash -c '! grep -rn "fmt\.Print" --include="*.go" . | grep -v "_test\.go" | grep -v "vendor/" || (echo "Found fmt.Print statements (use structured logging instead)" && exit 1)'
      #   language: system
      #   pass_filenames: false
