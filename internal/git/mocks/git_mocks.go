// Code generated by MockGen. DO NOT EDIT.
// Source: internal/git/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/git/interfaces.go -destination=internal/git/mocks/git_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	git "github.com/Gizzahub/gzh-manager-go/internal/git"
)

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
	isgomock struct{}
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// AddRemote mocks base method.
func (m *MockGitClient) AddRemote(ctx context.Context, repoPath, name, url string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemote", ctx, repoPath, name, url)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRemote indicates an expected call of AddRemote.
func (mr *MockGitClientMockRecorder) AddRemote(ctx, repoPath, name, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemote", reflect.TypeOf((*MockGitClient)(nil).AddRemote), ctx, repoPath, name, url)
}

// CheckoutBranch mocks base method.
func (m *MockGitClient) CheckoutBranch(ctx context.Context, repoPath, branchName string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBranch", ctx, repoPath, branchName)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutBranch indicates an expected call of CheckoutBranch.
func (mr *MockGitClientMockRecorder) CheckoutBranch(ctx, repoPath, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBranch", reflect.TypeOf((*MockGitClient)(nil).CheckoutBranch), ctx, repoPath, branchName)
}

// Clone mocks base method.
func (m *MockGitClient) Clone(ctx context.Context, options git.CloneOptions) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, options)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockGitClientMockRecorder) Clone(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitClient)(nil).Clone), ctx, options)
}

// CreateBranch mocks base method.
func (m *MockGitClient) CreateBranch(ctx context.Context, repoPath, branchName string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", ctx, repoPath, branchName)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockGitClientMockRecorder) CreateBranch(ctx, repoPath, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGitClient)(nil).CreateBranch), ctx, repoPath, branchName)
}

// DeleteBranch mocks base method.
func (m *MockGitClient) DeleteBranch(ctx context.Context, repoPath, branchName string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, repoPath, branchName)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockGitClientMockRecorder) DeleteBranch(ctx, repoPath, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockGitClient)(nil).DeleteBranch), ctx, repoPath, branchName)
}

// Fetch mocks base method.
func (m *MockGitClient) Fetch(ctx context.Context, repoPath, remote string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, repoPath, remote)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockGitClientMockRecorder) Fetch(ctx, repoPath, remote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockGitClient)(nil).Fetch), ctx, repoPath, remote)
}

// GetCommitHistory mocks base method.
func (m *MockGitClient) GetCommitHistory(ctx context.Context, repoPath string, limit int) ([]git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitHistory", ctx, repoPath, limit)
	ret0, _ := ret[0].([]git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitHistory indicates an expected call of GetCommitHistory.
func (mr *MockGitClientMockRecorder) GetCommitHistory(ctx, repoPath, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitHistory", reflect.TypeOf((*MockGitClient)(nil).GetCommitHistory), ctx, repoPath, limit)
}

// GetCurrentBranch mocks base method.
func (m *MockGitClient) GetCurrentBranch(ctx context.Context, repoPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBranch", ctx, repoPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBranch indicates an expected call of GetCurrentBranch.
func (mr *MockGitClientMockRecorder) GetCurrentBranch(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBranch", reflect.TypeOf((*MockGitClient)(nil).GetCurrentBranch), ctx, repoPath)
}

// GetDefaultBranch mocks base method.
func (m *MockGitClient) GetDefaultBranch(ctx context.Context, repoPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch", ctx, repoPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockGitClientMockRecorder) GetDefaultBranch(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockGitClient)(nil).GetDefaultBranch), ctx, repoPath)
}

// GetLastCommit mocks base method.
func (m *MockGitClient) GetLastCommit(ctx context.Context, repoPath string) (*git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommit", ctx, repoPath)
	ret0, _ := ret[0].(*git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCommit indicates an expected call of GetLastCommit.
func (mr *MockGitClientMockRecorder) GetLastCommit(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommit", reflect.TypeOf((*MockGitClient)(nil).GetLastCommit), ctx, repoPath)
}

// GetRepository mocks base method.
func (m *MockGitClient) GetRepository(ctx context.Context, path string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, path)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockGitClientMockRecorder) GetRepository(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGitClient)(nil).GetRepository), ctx, path)
}

// GetStatus mocks base method.
func (m *MockGitClient) GetStatus(ctx context.Context, repoPath string) (*git.StatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, repoPath)
	ret0, _ := ret[0].(*git.StatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockGitClientMockRecorder) GetStatus(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockGitClient)(nil).GetStatus), ctx, repoPath)
}

// IsDirty mocks base method.
func (m *MockGitClient) IsDirty(ctx context.Context, repoPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirty", ctx, repoPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDirty indicates an expected call of IsDirty.
func (mr *MockGitClientMockRecorder) IsDirty(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockGitClient)(nil).IsDirty), ctx, repoPath)
}

// IsRepository mocks base method.
func (m *MockGitClient) IsRepository(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRepository", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRepository indicates an expected call of IsRepository.
func (mr *MockGitClientMockRecorder) IsRepository(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRepository", reflect.TypeOf((*MockGitClient)(nil).IsRepository), ctx, path)
}

// ListBranches mocks base method.
func (m *MockGitClient) ListBranches(ctx context.Context, repoPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", ctx, repoPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockGitClientMockRecorder) ListBranches(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockGitClient)(nil).ListBranches), ctx, repoPath)
}

// ListRemotes mocks base method.
func (m *MockGitClient) ListRemotes(ctx context.Context, repoPath string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemotes", ctx, repoPath)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemotes indicates an expected call of ListRemotes.
func (mr *MockGitClientMockRecorder) ListRemotes(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemotes", reflect.TypeOf((*MockGitClient)(nil).ListRemotes), ctx, repoPath)
}

// Pull mocks base method.
func (m *MockGitClient) Pull(ctx context.Context, repoPath string, options git.PullOptions) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx, repoPath, options)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockGitClientMockRecorder) Pull(ctx, repoPath, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockGitClient)(nil).Pull), ctx, repoPath, options)
}

// RemoveRemote mocks base method.
func (m *MockGitClient) RemoveRemote(ctx context.Context, repoPath, name string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRemote", ctx, repoPath, name)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRemote indicates an expected call of RemoveRemote.
func (mr *MockGitClientMockRecorder) RemoveRemote(ctx, repoPath, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemote", reflect.TypeOf((*MockGitClient)(nil).RemoveRemote), ctx, repoPath, name)
}

// Reset mocks base method.
func (m *MockGitClient) Reset(ctx context.Context, repoPath string, options git.ResetOptions) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, repoPath, options)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockGitClientMockRecorder) Reset(ctx, repoPath, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGitClient)(nil).Reset), ctx, repoPath, options)
}

// SetRemoteURL mocks base method.
func (m *MockGitClient) SetRemoteURL(ctx context.Context, repoPath, remote, url string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteURL", ctx, repoPath, remote, url)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRemoteURL indicates an expected call of SetRemoteURL.
func (mr *MockGitClientMockRecorder) SetRemoteURL(ctx, repoPath, remote, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteURL", reflect.TypeOf((*MockGitClient)(nil).SetRemoteURL), ctx, repoPath, remote, url)
}

// ValidateRepository mocks base method.
func (m *MockGitClient) ValidateRepository(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRepository", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRepository indicates an expected call of ValidateRepository.
func (mr *MockGitClientMockRecorder) ValidateRepository(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRepository", reflect.TypeOf((*MockGitClient)(nil).ValidateRepository), ctx, path)
}

// MockStrategyExecutor is a mock of StrategyExecutor interface.
type MockStrategyExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyExecutorMockRecorder
	isgomock struct{}
}

// MockStrategyExecutorMockRecorder is the mock recorder for MockStrategyExecutor.
type MockStrategyExecutorMockRecorder struct {
	mock *MockStrategyExecutor
}

// NewMockStrategyExecutor creates a new mock instance.
func NewMockStrategyExecutor(ctrl *gomock.Controller) *MockStrategyExecutor {
	mock := &MockStrategyExecutor{ctrl: ctrl}
	mock.recorder = &MockStrategyExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrategyExecutor) EXPECT() *MockStrategyExecutorMockRecorder {
	return m.recorder
}

// ExecuteStrategy mocks base method.
func (m *MockStrategyExecutor) ExecuteStrategy(ctx context.Context, repoPath, strategy string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStrategy", ctx, repoPath, strategy)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStrategy indicates an expected call of ExecuteStrategy.
func (mr *MockStrategyExecutorMockRecorder) ExecuteStrategy(ctx, repoPath, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStrategy", reflect.TypeOf((*MockStrategyExecutor)(nil).ExecuteStrategy), ctx, repoPath, strategy)
}

// GetStrategyDescription mocks base method.
func (m *MockStrategyExecutor) GetStrategyDescription(strategy string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategyDescription", strategy)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStrategyDescription indicates an expected call of GetStrategyDescription.
func (mr *MockStrategyExecutorMockRecorder) GetStrategyDescription(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategyDescription", reflect.TypeOf((*MockStrategyExecutor)(nil).GetStrategyDescription), strategy)
}

// GetSupportedStrategies mocks base method.
func (m *MockStrategyExecutor) GetSupportedStrategies() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedStrategies")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedStrategies indicates an expected call of GetSupportedStrategies.
func (mr *MockStrategyExecutorMockRecorder) GetSupportedStrategies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedStrategies", reflect.TypeOf((*MockStrategyExecutor)(nil).GetSupportedStrategies))
}

// IsValidStrategy mocks base method.
func (m *MockStrategyExecutor) IsValidStrategy(strategy string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidStrategy", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidStrategy indicates an expected call of IsValidStrategy.
func (mr *MockStrategyExecutorMockRecorder) IsValidStrategy(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidStrategy", reflect.TypeOf((*MockStrategyExecutor)(nil).IsValidStrategy), strategy)
}

// MockBulkOperator is a mock of BulkOperator interface.
type MockBulkOperator struct {
	ctrl     *gomock.Controller
	recorder *MockBulkOperatorMockRecorder
	isgomock struct{}
}

// MockBulkOperatorMockRecorder is the mock recorder for MockBulkOperator.
type MockBulkOperatorMockRecorder struct {
	mock *MockBulkOperator
}

// NewMockBulkOperator creates a new mock instance.
func NewMockBulkOperator(ctrl *gomock.Controller) *MockBulkOperator {
	mock := &MockBulkOperator{ctrl: ctrl}
	mock.recorder = &MockBulkOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkOperator) EXPECT() *MockBulkOperatorMockRecorder {
	return m.recorder
}

// ExecuteBulkOperation mocks base method.
func (m *MockBulkOperator) ExecuteBulkOperation(ctx context.Context, repoPaths []string, operation git.BulkOperation) ([]git.BulkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBulkOperation", ctx, repoPaths, operation)
	ret0, _ := ret[0].([]git.BulkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBulkOperation indicates an expected call of ExecuteBulkOperation.
func (mr *MockBulkOperatorMockRecorder) ExecuteBulkOperation(ctx, repoPaths, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBulkOperation", reflect.TypeOf((*MockBulkOperator)(nil).ExecuteBulkOperation), ctx, repoPaths, operation)
}

// ExecuteBulkOperationWithOptions mocks base method.
func (m *MockBulkOperator) ExecuteBulkOperationWithOptions(ctx context.Context, repoPaths []string, operation git.BulkOperation, options git.BulkOptions) ([]git.BulkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBulkOperationWithOptions", ctx, repoPaths, operation, options)
	ret0, _ := ret[0].([]git.BulkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBulkOperationWithOptions indicates an expected call of ExecuteBulkOperationWithOptions.
func (mr *MockBulkOperatorMockRecorder) ExecuteBulkOperationWithOptions(ctx, repoPaths, operation, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBulkOperationWithOptions", reflect.TypeOf((*MockBulkOperator)(nil).ExecuteBulkOperationWithOptions), ctx, repoPaths, operation, options)
}

// GetProgress mocks base method.
func (m *MockBulkOperator) GetProgress() <-chan git.BulkProgress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress")
	ret0, _ := ret[0].(<-chan git.BulkProgress)
	return ret0
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockBulkOperatorMockRecorder) GetProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockBulkOperator)(nil).GetProgress))
}

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
	isgomock struct{}
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// ConfigurePasswordAuth mocks base method.
func (m *MockAuthManager) ConfigurePasswordAuth(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurePasswordAuth", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurePasswordAuth indicates an expected call of ConfigurePasswordAuth.
func (mr *MockAuthManagerMockRecorder) ConfigurePasswordAuth(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurePasswordAuth", reflect.TypeOf((*MockAuthManager)(nil).ConfigurePasswordAuth), ctx, username, password)
}

// ConfigureSSHAuth mocks base method.
func (m *MockAuthManager) ConfigureSSHAuth(ctx context.Context, keyPath, passphrase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureSSHAuth", ctx, keyPath, passphrase)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureSSHAuth indicates an expected call of ConfigureSSHAuth.
func (mr *MockAuthManagerMockRecorder) ConfigureSSHAuth(ctx, keyPath, passphrase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureSSHAuth", reflect.TypeOf((*MockAuthManager)(nil).ConfigureSSHAuth), ctx, keyPath, passphrase)
}

// ConfigureTokenAuth mocks base method.
func (m *MockAuthManager) ConfigureTokenAuth(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureTokenAuth", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureTokenAuth indicates an expected call of ConfigureTokenAuth.
func (mr *MockAuthManagerMockRecorder) ConfigureTokenAuth(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureTokenAuth", reflect.TypeOf((*MockAuthManager)(nil).ConfigureTokenAuth), ctx, token)
}

// GetAuthMethod mocks base method.
func (m *MockAuthManager) GetAuthMethod() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthMethod")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthMethod indicates an expected call of GetAuthMethod.
func (mr *MockAuthManagerMockRecorder) GetAuthMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthMethod", reflect.TypeOf((*MockAuthManager)(nil).GetAuthMethod))
}

// ValidateAuth mocks base method.
func (m *MockAuthManager) ValidateAuth(ctx context.Context, remoteURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAuth", ctx, remoteURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAuth indicates an expected call of ValidateAuth.
func (mr *MockAuthManagerMockRecorder) ValidateAuth(ctx, remoteURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAuth", reflect.TypeOf((*MockAuthManager)(nil).ValidateAuth), ctx, remoteURL)
}

// MockGitService is a mock of GitService interface.
type MockGitService struct {
	ctrl     *gomock.Controller
	recorder *MockGitServiceMockRecorder
	isgomock struct{}
}

// MockGitServiceMockRecorder is the mock recorder for MockGitService.
type MockGitServiceMockRecorder struct {
	mock *MockGitService
}

// NewMockGitService creates a new mock instance.
func NewMockGitService(ctrl *gomock.Controller) *MockGitService {
	mock := &MockGitService{ctrl: ctrl}
	mock.recorder = &MockGitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitService) EXPECT() *MockGitServiceMockRecorder {
	return m.recorder
}

// AddRemote mocks base method.
func (m *MockGitService) AddRemote(ctx context.Context, repoPath, name, url string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemote", ctx, repoPath, name, url)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRemote indicates an expected call of AddRemote.
func (mr *MockGitServiceMockRecorder) AddRemote(ctx, repoPath, name, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemote", reflect.TypeOf((*MockGitService)(nil).AddRemote), ctx, repoPath, name, url)
}

// CheckoutBranch mocks base method.
func (m *MockGitService) CheckoutBranch(ctx context.Context, repoPath, branchName string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBranch", ctx, repoPath, branchName)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutBranch indicates an expected call of CheckoutBranch.
func (mr *MockGitServiceMockRecorder) CheckoutBranch(ctx, repoPath, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBranch", reflect.TypeOf((*MockGitService)(nil).CheckoutBranch), ctx, repoPath, branchName)
}

// Clone mocks base method.
func (m *MockGitService) Clone(ctx context.Context, options git.CloneOptions) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, options)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockGitServiceMockRecorder) Clone(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitService)(nil).Clone), ctx, options)
}

// ConfigurePasswordAuth mocks base method.
func (m *MockGitService) ConfigurePasswordAuth(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurePasswordAuth", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurePasswordAuth indicates an expected call of ConfigurePasswordAuth.
func (mr *MockGitServiceMockRecorder) ConfigurePasswordAuth(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurePasswordAuth", reflect.TypeOf((*MockGitService)(nil).ConfigurePasswordAuth), ctx, username, password)
}

// ConfigureSSHAuth mocks base method.
func (m *MockGitService) ConfigureSSHAuth(ctx context.Context, keyPath, passphrase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureSSHAuth", ctx, keyPath, passphrase)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureSSHAuth indicates an expected call of ConfigureSSHAuth.
func (mr *MockGitServiceMockRecorder) ConfigureSSHAuth(ctx, keyPath, passphrase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureSSHAuth", reflect.TypeOf((*MockGitService)(nil).ConfigureSSHAuth), ctx, keyPath, passphrase)
}

// ConfigureTokenAuth mocks base method.
func (m *MockGitService) ConfigureTokenAuth(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureTokenAuth", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureTokenAuth indicates an expected call of ConfigureTokenAuth.
func (mr *MockGitServiceMockRecorder) ConfigureTokenAuth(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureTokenAuth", reflect.TypeOf((*MockGitService)(nil).ConfigureTokenAuth), ctx, token)
}

// CreateBranch mocks base method.
func (m *MockGitService) CreateBranch(ctx context.Context, repoPath, branchName string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", ctx, repoPath, branchName)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockGitServiceMockRecorder) CreateBranch(ctx, repoPath, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGitService)(nil).CreateBranch), ctx, repoPath, branchName)
}

// DeleteBranch mocks base method.
func (m *MockGitService) DeleteBranch(ctx context.Context, repoPath, branchName string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, repoPath, branchName)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockGitServiceMockRecorder) DeleteBranch(ctx, repoPath, branchName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockGitService)(nil).DeleteBranch), ctx, repoPath, branchName)
}

// ExecuteBulkOperation mocks base method.
func (m *MockGitService) ExecuteBulkOperation(ctx context.Context, repoPaths []string, operation git.BulkOperation) ([]git.BulkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBulkOperation", ctx, repoPaths, operation)
	ret0, _ := ret[0].([]git.BulkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBulkOperation indicates an expected call of ExecuteBulkOperation.
func (mr *MockGitServiceMockRecorder) ExecuteBulkOperation(ctx, repoPaths, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBulkOperation", reflect.TypeOf((*MockGitService)(nil).ExecuteBulkOperation), ctx, repoPaths, operation)
}

// ExecuteBulkOperationWithOptions mocks base method.
func (m *MockGitService) ExecuteBulkOperationWithOptions(ctx context.Context, repoPaths []string, operation git.BulkOperation, options git.BulkOptions) ([]git.BulkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBulkOperationWithOptions", ctx, repoPaths, operation, options)
	ret0, _ := ret[0].([]git.BulkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBulkOperationWithOptions indicates an expected call of ExecuteBulkOperationWithOptions.
func (mr *MockGitServiceMockRecorder) ExecuteBulkOperationWithOptions(ctx, repoPaths, operation, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBulkOperationWithOptions", reflect.TypeOf((*MockGitService)(nil).ExecuteBulkOperationWithOptions), ctx, repoPaths, operation, options)
}

// ExecuteStrategy mocks base method.
func (m *MockGitService) ExecuteStrategy(ctx context.Context, repoPath, strategy string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStrategy", ctx, repoPath, strategy)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStrategy indicates an expected call of ExecuteStrategy.
func (mr *MockGitServiceMockRecorder) ExecuteStrategy(ctx, repoPath, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStrategy", reflect.TypeOf((*MockGitService)(nil).ExecuteStrategy), ctx, repoPath, strategy)
}

// Fetch mocks base method.
func (m *MockGitService) Fetch(ctx context.Context, repoPath, remote string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, repoPath, remote)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockGitServiceMockRecorder) Fetch(ctx, repoPath, remote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockGitService)(nil).Fetch), ctx, repoPath, remote)
}

// GetAuthMethod mocks base method.
func (m *MockGitService) GetAuthMethod() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthMethod")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthMethod indicates an expected call of GetAuthMethod.
func (mr *MockGitServiceMockRecorder) GetAuthMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthMethod", reflect.TypeOf((*MockGitService)(nil).GetAuthMethod))
}

// GetCommitHistory mocks base method.
func (m *MockGitService) GetCommitHistory(ctx context.Context, repoPath string, limit int) ([]git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitHistory", ctx, repoPath, limit)
	ret0, _ := ret[0].([]git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitHistory indicates an expected call of GetCommitHistory.
func (mr *MockGitServiceMockRecorder) GetCommitHistory(ctx, repoPath, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitHistory", reflect.TypeOf((*MockGitService)(nil).GetCommitHistory), ctx, repoPath, limit)
}

// GetCurrentBranch mocks base method.
func (m *MockGitService) GetCurrentBranch(ctx context.Context, repoPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBranch", ctx, repoPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBranch indicates an expected call of GetCurrentBranch.
func (mr *MockGitServiceMockRecorder) GetCurrentBranch(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBranch", reflect.TypeOf((*MockGitService)(nil).GetCurrentBranch), ctx, repoPath)
}

// GetDefaultBranch mocks base method.
func (m *MockGitService) GetDefaultBranch(ctx context.Context, repoPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch", ctx, repoPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockGitServiceMockRecorder) GetDefaultBranch(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockGitService)(nil).GetDefaultBranch), ctx, repoPath)
}

// GetLastCommit mocks base method.
func (m *MockGitService) GetLastCommit(ctx context.Context, repoPath string) (*git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommit", ctx, repoPath)
	ret0, _ := ret[0].(*git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCommit indicates an expected call of GetLastCommit.
func (mr *MockGitServiceMockRecorder) GetLastCommit(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommit", reflect.TypeOf((*MockGitService)(nil).GetLastCommit), ctx, repoPath)
}

// GetProgress mocks base method.
func (m *MockGitService) GetProgress() <-chan git.BulkProgress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress")
	ret0, _ := ret[0].(<-chan git.BulkProgress)
	return ret0
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockGitServiceMockRecorder) GetProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockGitService)(nil).GetProgress))
}

// GetRepository mocks base method.
func (m *MockGitService) GetRepository(ctx context.Context, path string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, path)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockGitServiceMockRecorder) GetRepository(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGitService)(nil).GetRepository), ctx, path)
}

// GetStatus mocks base method.
func (m *MockGitService) GetStatus(ctx context.Context, repoPath string) (*git.StatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, repoPath)
	ret0, _ := ret[0].(*git.StatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockGitServiceMockRecorder) GetStatus(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockGitService)(nil).GetStatus), ctx, repoPath)
}

// GetStrategyDescription mocks base method.
func (m *MockGitService) GetStrategyDescription(strategy string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategyDescription", strategy)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStrategyDescription indicates an expected call of GetStrategyDescription.
func (mr *MockGitServiceMockRecorder) GetStrategyDescription(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategyDescription", reflect.TypeOf((*MockGitService)(nil).GetStrategyDescription), strategy)
}

// GetSupportedStrategies mocks base method.
func (m *MockGitService) GetSupportedStrategies() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedStrategies")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedStrategies indicates an expected call of GetSupportedStrategies.
func (mr *MockGitServiceMockRecorder) GetSupportedStrategies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedStrategies", reflect.TypeOf((*MockGitService)(nil).GetSupportedStrategies))
}

// IsDirty mocks base method.
func (m *MockGitService) IsDirty(ctx context.Context, repoPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirty", ctx, repoPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDirty indicates an expected call of IsDirty.
func (mr *MockGitServiceMockRecorder) IsDirty(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockGitService)(nil).IsDirty), ctx, repoPath)
}

// IsRepository mocks base method.
func (m *MockGitService) IsRepository(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRepository", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRepository indicates an expected call of IsRepository.
func (mr *MockGitServiceMockRecorder) IsRepository(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRepository", reflect.TypeOf((*MockGitService)(nil).IsRepository), ctx, path)
}

// IsValidStrategy mocks base method.
func (m *MockGitService) IsValidStrategy(strategy string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidStrategy", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidStrategy indicates an expected call of IsValidStrategy.
func (mr *MockGitServiceMockRecorder) IsValidStrategy(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidStrategy", reflect.TypeOf((*MockGitService)(nil).IsValidStrategy), strategy)
}

// ListBranches mocks base method.
func (m *MockGitService) ListBranches(ctx context.Context, repoPath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", ctx, repoPath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockGitServiceMockRecorder) ListBranches(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockGitService)(nil).ListBranches), ctx, repoPath)
}

// ListRemotes mocks base method.
func (m *MockGitService) ListRemotes(ctx context.Context, repoPath string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemotes", ctx, repoPath)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemotes indicates an expected call of ListRemotes.
func (mr *MockGitServiceMockRecorder) ListRemotes(ctx, repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemotes", reflect.TypeOf((*MockGitService)(nil).ListRemotes), ctx, repoPath)
}

// Pull mocks base method.
func (m *MockGitService) Pull(ctx context.Context, repoPath string, options git.PullOptions) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx, repoPath, options)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockGitServiceMockRecorder) Pull(ctx, repoPath, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockGitService)(nil).Pull), ctx, repoPath, options)
}

// RemoveRemote mocks base method.
func (m *MockGitService) RemoveRemote(ctx context.Context, repoPath, name string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRemote", ctx, repoPath, name)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRemote indicates an expected call of RemoveRemote.
func (mr *MockGitServiceMockRecorder) RemoveRemote(ctx, repoPath, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemote", reflect.TypeOf((*MockGitService)(nil).RemoveRemote), ctx, repoPath, name)
}

// Reset mocks base method.
func (m *MockGitService) Reset(ctx context.Context, repoPath string, options git.ResetOptions) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, repoPath, options)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockGitServiceMockRecorder) Reset(ctx, repoPath, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGitService)(nil).Reset), ctx, repoPath, options)
}

// SetRemoteURL mocks base method.
func (m *MockGitService) SetRemoteURL(ctx context.Context, repoPath, remote, url string) (*git.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteURL", ctx, repoPath, remote, url)
	ret0, _ := ret[0].(*git.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRemoteURL indicates an expected call of SetRemoteURL.
func (mr *MockGitServiceMockRecorder) SetRemoteURL(ctx, repoPath, remote, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteURL", reflect.TypeOf((*MockGitService)(nil).SetRemoteURL), ctx, repoPath, remote, url)
}

// ValidateAuth mocks base method.
func (m *MockGitService) ValidateAuth(ctx context.Context, remoteURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAuth", ctx, remoteURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAuth indicates an expected call of ValidateAuth.
func (mr *MockGitServiceMockRecorder) ValidateAuth(ctx, remoteURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAuth", reflect.TypeOf((*MockGitService)(nil).ValidateAuth), ctx, remoteURL)
}

// ValidateRepository mocks base method.
func (m *MockGitService) ValidateRepository(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRepository", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRepository indicates an expected call of ValidateRepository.
func (mr *MockGitServiceMockRecorder) ValidateRepository(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRepository", reflect.TypeOf((*MockGitService)(nil).ValidateRepository), ctx, path)
}
