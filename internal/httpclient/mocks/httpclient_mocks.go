// Code generated by MockGen. DO NOT EDIT.
// Source: internal/httpclient/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/httpclient/interfaces.go -destination=internal/httpclient/mocks/httpclient_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	httpclient "github.com/gizzahub/gzh-manager-go/internal/httpclient"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// AddDefaultHeader mocks base method.
func (m *MockHTTPClient) AddDefaultHeader(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDefaultHeader", key, value)
}

// AddDefaultHeader indicates an expected call of AddDefaultHeader.
func (mr *MockHTTPClientMockRecorder) AddDefaultHeader(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultHeader", reflect.TypeOf((*MockHTTPClient)(nil).AddDefaultHeader), key, value)
}

// AddRequestMiddleware mocks base method.
func (m *MockHTTPClient) AddRequestMiddleware(middleware httpclient.RequestMiddleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRequestMiddleware", middleware)
}

// AddRequestMiddleware indicates an expected call of AddRequestMiddleware.
func (mr *MockHTTPClientMockRecorder) AddRequestMiddleware(middleware any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestMiddleware", reflect.TypeOf((*MockHTTPClient)(nil).AddRequestMiddleware), middleware)
}

// AddResponseMiddleware mocks base method.
func (m *MockHTTPClient) AddResponseMiddleware(middleware httpclient.ResponseMiddleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddResponseMiddleware", middleware)
}

// AddResponseMiddleware indicates an expected call of AddResponseMiddleware.
func (mr *MockHTTPClientMockRecorder) AddResponseMiddleware(middleware any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResponseMiddleware", reflect.TypeOf((*MockHTTPClient)(nil).AddResponseMiddleware), middleware)
}

// Delete mocks base method.
func (m *MockHTTPClient) Delete(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHTTPClientMockRecorder) Delete(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPClient)(nil).Delete), ctx, url)
}

// Do mocks base method.
func (m *MockHTTPClient) Do(ctx context.Context, req *httpclient.Request) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), ctx, req)
}

// Get mocks base method.
func (m *MockHTTPClient) Get(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), ctx, url)
}

// Head mocks base method.
func (m *MockHTTPClient) Head(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockHTTPClientMockRecorder) Head(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockHTTPClient)(nil).Head), ctx, url)
}

// Options mocks base method.
func (m *MockHTTPClient) Options(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Options indicates an expected call of Options.
func (mr *MockHTTPClientMockRecorder) Options(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockHTTPClient)(nil).Options), ctx, url)
}

// Patch mocks base method.
func (m *MockHTTPClient) Patch(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockHTTPClientMockRecorder) Patch(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockHTTPClient)(nil).Patch), ctx, url, body)
}

// Post mocks base method.
func (m *MockHTTPClient) Post(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPClientMockRecorder) Post(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), ctx, url, body)
}

// Put mocks base method.
func (m *MockHTTPClient) Put(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHTTPClientMockRecorder) Put(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHTTPClient)(nil).Put), ctx, url, body)
}

// RemoveDefaultHeader mocks base method.
func (m *MockHTTPClient) RemoveDefaultHeader(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveDefaultHeader", key)
}

// RemoveDefaultHeader indicates an expected call of RemoveDefaultHeader.
func (mr *MockHTTPClientMockRecorder) RemoveDefaultHeader(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultHeader", reflect.TypeOf((*MockHTTPClient)(nil).RemoveDefaultHeader), key)
}

// SetAPIKey mocks base method.
func (m *MockHTTPClient) SetAPIKey(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIKey", key, value)
}

// SetAPIKey indicates an expected call of SetAPIKey.
func (mr *MockHTTPClientMockRecorder) SetAPIKey(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIKey", reflect.TypeOf((*MockHTTPClient)(nil).SetAPIKey), key, value)
}

// SetBaseURL mocks base method.
func (m *MockHTTPClient) SetBaseURL(baseURL string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", baseURL)
}

// SetBaseURL indicates an expected call of SetBaseURL.
func (mr *MockHTTPClientMockRecorder) SetBaseURL(baseURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockHTTPClient)(nil).SetBaseURL), baseURL)
}

// SetBasicAuth mocks base method.
func (m *MockHTTPClient) SetBasicAuth(username, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBasicAuth", username, password)
}

// SetBasicAuth indicates an expected call of SetBasicAuth.
func (mr *MockHTTPClientMockRecorder) SetBasicAuth(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBasicAuth", reflect.TypeOf((*MockHTTPClient)(nil).SetBasicAuth), username, password)
}

// SetBearerToken mocks base method.
func (m *MockHTTPClient) SetBearerToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBearerToken", token)
}

// SetBearerToken indicates an expected call of SetBearerToken.
func (mr *MockHTTPClientMockRecorder) SetBearerToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBearerToken", reflect.TypeOf((*MockHTTPClient)(nil).SetBearerToken), token)
}

// SetTimeout mocks base method.
func (m *MockHTTPClient) SetTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", timeout)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockHTTPClientMockRecorder) SetTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockHTTPClient)(nil).SetTimeout), timeout)
}

// SetUserAgent mocks base method.
func (m *MockHTTPClient) SetUserAgent(userAgent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserAgent", userAgent)
}

// SetUserAgent indicates an expected call of SetUserAgent.
func (mr *MockHTTPClientMockRecorder) SetUserAgent(userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAgent", reflect.TypeOf((*MockHTTPClient)(nil).SetUserAgent), userAgent)
}

// MockRequestMiddleware is a mock of RequestMiddleware interface.
type MockRequestMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMiddlewareMockRecorder
	isgomock struct{}
}

// MockRequestMiddlewareMockRecorder is the mock recorder for MockRequestMiddleware.
type MockRequestMiddlewareMockRecorder struct {
	mock *MockRequestMiddleware
}

// NewMockRequestMiddleware creates a new mock instance.
func NewMockRequestMiddleware(ctrl *gomock.Controller) *MockRequestMiddleware {
	mock := &MockRequestMiddleware{ctrl: ctrl}
	mock.recorder = &MockRequestMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestMiddleware) EXPECT() *MockRequestMiddlewareMockRecorder {
	return m.recorder
}

// ProcessRequest mocks base method.
func (m *MockRequestMiddleware) ProcessRequest(ctx context.Context, req *httpclient.Request) (*httpclient.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRequest", ctx, req)
	ret0, _ := ret[0].(*httpclient.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRequest indicates an expected call of ProcessRequest.
func (mr *MockRequestMiddlewareMockRecorder) ProcessRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRequest", reflect.TypeOf((*MockRequestMiddleware)(nil).ProcessRequest), ctx, req)
}

// MockResponseMiddleware is a mock of ResponseMiddleware interface.
type MockResponseMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMiddlewareMockRecorder
	isgomock struct{}
}

// MockResponseMiddlewareMockRecorder is the mock recorder for MockResponseMiddleware.
type MockResponseMiddlewareMockRecorder struct {
	mock *MockResponseMiddleware
}

// NewMockResponseMiddleware creates a new mock instance.
func NewMockResponseMiddleware(ctrl *gomock.Controller) *MockResponseMiddleware {
	mock := &MockResponseMiddleware{ctrl: ctrl}
	mock.recorder = &MockResponseMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseMiddleware) EXPECT() *MockResponseMiddlewareMockRecorder {
	return m.recorder
}

// ProcessResponse mocks base method.
func (m *MockResponseMiddleware) ProcessResponse(ctx context.Context, req *httpclient.Request, resp *httpclient.Response) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessResponse", ctx, req, resp)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessResponse indicates an expected call of ProcessResponse.
func (mr *MockResponseMiddlewareMockRecorder) ProcessResponse(ctx, req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessResponse", reflect.TypeOf((*MockResponseMiddleware)(nil).ProcessResponse), ctx, req, resp)
}

// MockRetryPolicy is a mock of RetryPolicy interface.
type MockRetryPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockRetryPolicyMockRecorder
	isgomock struct{}
}

// MockRetryPolicyMockRecorder is the mock recorder for MockRetryPolicy.
type MockRetryPolicyMockRecorder struct {
	mock *MockRetryPolicy
}

// NewMockRetryPolicy creates a new mock instance.
func NewMockRetryPolicy(ctrl *gomock.Controller) *MockRetryPolicy {
	mock := &MockRetryPolicy{ctrl: ctrl}
	mock.recorder = &MockRetryPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryPolicy) EXPECT() *MockRetryPolicyMockRecorder {
	return m.recorder
}

// GetRetryDelay mocks base method.
func (m *MockRetryPolicy) GetRetryDelay(ctx context.Context, attempt int) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryDelay", ctx, attempt)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRetryDelay indicates an expected call of GetRetryDelay.
func (mr *MockRetryPolicyMockRecorder) GetRetryDelay(ctx, attempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryDelay", reflect.TypeOf((*MockRetryPolicy)(nil).GetRetryDelay), ctx, attempt)
}

// MaxRetries mocks base method.
func (m *MockRetryPolicy) MaxRetries() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxRetries indicates an expected call of MaxRetries.
func (mr *MockRetryPolicyMockRecorder) MaxRetries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxRetries", reflect.TypeOf((*MockRetryPolicy)(nil).MaxRetries))
}

// ShouldRetry mocks base method.
func (m *MockRetryPolicy) ShouldRetry(ctx context.Context, req *httpclient.Request, resp *httpclient.Response, err error, attempt int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRetry", ctx, req, resp, err, attempt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldRetry indicates an expected call of ShouldRetry.
func (mr *MockRetryPolicyMockRecorder) ShouldRetry(ctx, req, resp, err, attempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRetry", reflect.TypeOf((*MockRetryPolicy)(nil).ShouldRetry), ctx, req, resp, err, attempt)
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
	isgomock struct{}
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockRateLimiter) Allow(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockRateLimiterMockRecorder) Allow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRateLimiter)(nil).Allow), ctx)
}

// GetLimitInfo mocks base method.
func (m *MockRateLimiter) GetLimitInfo() *httpclient.RateLimitInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitInfo")
	ret0, _ := ret[0].(*httpclient.RateLimitInfo)
	return ret0
}

// GetLimitInfo indicates an expected call of GetLimitInfo.
func (mr *MockRateLimiterMockRecorder) GetLimitInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitInfo", reflect.TypeOf((*MockRateLimiter)(nil).GetLimitInfo))
}

// Reset mocks base method.
func (m *MockRateLimiter) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockRateLimiterMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockRateLimiter)(nil).Reset))
}

// Wait mocks base method.
func (m *MockRateLimiter) Wait(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRateLimiterMockRecorder) Wait(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRateLimiter)(nil).Wait), ctx)
}

// MockCachePolicy is a mock of CachePolicy interface.
type MockCachePolicy struct {
	ctrl     *gomock.Controller
	recorder *MockCachePolicyMockRecorder
	isgomock struct{}
}

// MockCachePolicyMockRecorder is the mock recorder for MockCachePolicy.
type MockCachePolicyMockRecorder struct {
	mock *MockCachePolicy
}

// NewMockCachePolicy creates a new mock instance.
func NewMockCachePolicy(ctrl *gomock.Controller) *MockCachePolicy {
	mock := &MockCachePolicy{ctrl: ctrl}
	mock.recorder = &MockCachePolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachePolicy) EXPECT() *MockCachePolicyMockRecorder {
	return m.recorder
}

// GetCached mocks base method.
func (m *MockCachePolicy) GetCached(ctx context.Context, req *httpclient.Request) (*httpclient.Response, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCached", ctx, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCached indicates an expected call of GetCached.
func (mr *MockCachePolicyMockRecorder) GetCached(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCached", reflect.TypeOf((*MockCachePolicy)(nil).GetCached), ctx, req)
}

// GetStats mocks base method.
func (m *MockCachePolicy) GetStats() *httpclient.CacheStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*httpclient.CacheStats)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockCachePolicyMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockCachePolicy)(nil).GetStats))
}

// Invalidate mocks base method.
func (m *MockCachePolicy) Invalidate(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockCachePolicyMockRecorder) Invalidate(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockCachePolicy)(nil).Invalidate), ctx, pattern)
}

// ShouldCache mocks base method.
func (m *MockCachePolicy) ShouldCache(ctx context.Context, req *httpclient.Request, resp *httpclient.Response) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldCache", ctx, req, resp)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldCache indicates an expected call of ShouldCache.
func (mr *MockCachePolicyMockRecorder) ShouldCache(ctx, req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldCache", reflect.TypeOf((*MockCachePolicy)(nil).ShouldCache), ctx, req, resp)
}

// Store mocks base method.
func (m *MockCachePolicy) Store(ctx context.Context, req *httpclient.Request, resp *httpclient.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCachePolicyMockRecorder) Store(ctx, req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCachePolicy)(nil).Store), ctx, req, resp)
}

// MockRequestLogger is a mock of RequestLogger interface.
type MockRequestLogger struct {
	ctrl     *gomock.Controller
	recorder *MockRequestLoggerMockRecorder
	isgomock struct{}
}

// MockRequestLoggerMockRecorder is the mock recorder for MockRequestLogger.
type MockRequestLoggerMockRecorder struct {
	mock *MockRequestLogger
}

// NewMockRequestLogger creates a new mock instance.
func NewMockRequestLogger(ctrl *gomock.Controller) *MockRequestLogger {
	mock := &MockRequestLogger{ctrl: ctrl}
	mock.recorder = &MockRequestLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestLogger) EXPECT() *MockRequestLoggerMockRecorder {
	return m.recorder
}

// GetLogs mocks base method.
func (m *MockRequestLogger) GetLogs(ctx context.Context, filters httpclient.LogFilters) ([]httpclient.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, filters)
	ret0, _ := ret[0].([]httpclient.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockRequestLoggerMockRecorder) GetLogs(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockRequestLogger)(nil).GetLogs), ctx, filters)
}

// LogRequest mocks base method.
func (m *MockRequestLogger) LogRequest(ctx context.Context, req *httpclient.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogRequest indicates an expected call of LogRequest.
func (mr *MockRequestLoggerMockRecorder) LogRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRequest", reflect.TypeOf((*MockRequestLogger)(nil).LogRequest), ctx, req)
}

// LogResponse mocks base method.
func (m *MockRequestLogger) LogResponse(ctx context.Context, req *httpclient.Request, resp *httpclient.Response, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogResponse", ctx, req, resp, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogResponse indicates an expected call of LogResponse.
func (mr *MockRequestLoggerMockRecorder) LogResponse(ctx, req, resp, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogResponse", reflect.TypeOf((*MockRequestLogger)(nil).LogResponse), ctx, req, resp, err)
}

// SetLogLevel mocks base method.
func (m *MockRequestLogger) SetLogLevel(level httpclient.LogLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", level)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockRequestLoggerMockRecorder) SetLogLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockRequestLogger)(nil).SetLogLevel), level)
}

// MockMockClient is a mock of MockClient interface.
type MockMockClient struct {
	ctrl     *gomock.Controller
	recorder *MockMockClientMockRecorder
	isgomock struct{}
}

// MockMockClientMockRecorder is the mock recorder for MockMockClient.
type MockMockClientMockRecorder struct {
	mock *MockMockClient
}

// NewMockMockClient creates a new mock instance.
func NewMockMockClient(ctrl *gomock.Controller) *MockMockClient {
	mock := &MockMockClient{ctrl: ctrl}
	mock.recorder = &MockMockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockClient) EXPECT() *MockMockClientMockRecorder {
	return m.recorder
}

// AddDefaultHeader mocks base method.
func (m *MockMockClient) AddDefaultHeader(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDefaultHeader", key, value)
}

// AddDefaultHeader indicates an expected call of AddDefaultHeader.
func (mr *MockMockClientMockRecorder) AddDefaultHeader(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultHeader", reflect.TypeOf((*MockMockClient)(nil).AddDefaultHeader), key, value)
}

// AddMock mocks base method.
func (m *MockMockClient) AddMock(mock *httpclient.Mock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMock", mock)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMock indicates an expected call of AddMock.
func (mr *MockMockClientMockRecorder) AddMock(mock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMock", reflect.TypeOf((*MockMockClient)(nil).AddMock), mock)
}

// AddRequestMiddleware mocks base method.
func (m *MockMockClient) AddRequestMiddleware(middleware httpclient.RequestMiddleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRequestMiddleware", middleware)
}

// AddRequestMiddleware indicates an expected call of AddRequestMiddleware.
func (mr *MockMockClientMockRecorder) AddRequestMiddleware(middleware any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestMiddleware", reflect.TypeOf((*MockMockClient)(nil).AddRequestMiddleware), middleware)
}

// AddResponseMiddleware mocks base method.
func (m *MockMockClient) AddResponseMiddleware(middleware httpclient.ResponseMiddleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddResponseMiddleware", middleware)
}

// AddResponseMiddleware indicates an expected call of AddResponseMiddleware.
func (mr *MockMockClientMockRecorder) AddResponseMiddleware(middleware any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResponseMiddleware", reflect.TypeOf((*MockMockClient)(nil).AddResponseMiddleware), middleware)
}

// ClearMocks mocks base method.
func (m *MockMockClient) ClearMocks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMocks")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMocks indicates an expected call of ClearMocks.
func (mr *MockMockClientMockRecorder) ClearMocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMocks", reflect.TypeOf((*MockMockClient)(nil).ClearMocks))
}

// Delete mocks base method.
func (m *MockMockClient) Delete(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMockClientMockRecorder) Delete(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMockClient)(nil).Delete), ctx, url)
}

// Do mocks base method.
func (m *MockMockClient) Do(ctx context.Context, req *httpclient.Request) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockMockClientMockRecorder) Do(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockMockClient)(nil).Do), ctx, req)
}

// Get mocks base method.
func (m *MockMockClient) Get(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMockClientMockRecorder) Get(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMockClient)(nil).Get), ctx, url)
}

// GetRecordings mocks base method.
func (m *MockMockClient) GetRecordings() []*httpclient.Recording {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordings")
	ret0, _ := ret[0].([]*httpclient.Recording)
	return ret0
}

// GetRecordings indicates an expected call of GetRecordings.
func (mr *MockMockClientMockRecorder) GetRecordings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordings", reflect.TypeOf((*MockMockClient)(nil).GetRecordings))
}

// Head mocks base method.
func (m *MockMockClient) Head(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockMockClientMockRecorder) Head(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockMockClient)(nil).Head), ctx, url)
}

// ListMocks mocks base method.
func (m *MockMockClient) ListMocks() []*httpclient.Mock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMocks")
	ret0, _ := ret[0].([]*httpclient.Mock)
	return ret0
}

// ListMocks indicates an expected call of ListMocks.
func (mr *MockMockClientMockRecorder) ListMocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMocks", reflect.TypeOf((*MockMockClient)(nil).ListMocks))
}

// LoadRecordings mocks base method.
func (m *MockMockClient) LoadRecordings(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRecordings", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadRecordings indicates an expected call of LoadRecordings.
func (mr *MockMockClientMockRecorder) LoadRecordings(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRecordings", reflect.TypeOf((*MockMockClient)(nil).LoadRecordings), path)
}

// Options mocks base method.
func (m *MockMockClient) Options(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Options indicates an expected call of Options.
func (mr *MockMockClientMockRecorder) Options(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockMockClient)(nil).Options), ctx, url)
}

// Patch mocks base method.
func (m *MockMockClient) Patch(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockMockClientMockRecorder) Patch(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockMockClient)(nil).Patch), ctx, url, body)
}

// Post mocks base method.
func (m *MockMockClient) Post(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockMockClientMockRecorder) Post(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockMockClient)(nil).Post), ctx, url, body)
}

// Put mocks base method.
func (m *MockMockClient) Put(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockMockClientMockRecorder) Put(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMockClient)(nil).Put), ctx, url, body)
}

// RemoveDefaultHeader mocks base method.
func (m *MockMockClient) RemoveDefaultHeader(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveDefaultHeader", key)
}

// RemoveDefaultHeader indicates an expected call of RemoveDefaultHeader.
func (mr *MockMockClientMockRecorder) RemoveDefaultHeader(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultHeader", reflect.TypeOf((*MockMockClient)(nil).RemoveDefaultHeader), key)
}

// RemoveMock mocks base method.
func (m *MockMockClient) RemoveMock(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMock", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMock indicates an expected call of RemoveMock.
func (mr *MockMockClientMockRecorder) RemoveMock(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMock", reflect.TypeOf((*MockMockClient)(nil).RemoveMock), id)
}

// SaveRecordings mocks base method.
func (m *MockMockClient) SaveRecordings(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecordings", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRecordings indicates an expected call of SaveRecordings.
func (mr *MockMockClientMockRecorder) SaveRecordings(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecordings", reflect.TypeOf((*MockMockClient)(nil).SaveRecordings), path)
}

// SetAPIKey mocks base method.
func (m *MockMockClient) SetAPIKey(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIKey", key, value)
}

// SetAPIKey indicates an expected call of SetAPIKey.
func (mr *MockMockClientMockRecorder) SetAPIKey(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIKey", reflect.TypeOf((*MockMockClient)(nil).SetAPIKey), key, value)
}

// SetBaseURL mocks base method.
func (m *MockMockClient) SetBaseURL(baseURL string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", baseURL)
}

// SetBaseURL indicates an expected call of SetBaseURL.
func (mr *MockMockClientMockRecorder) SetBaseURL(baseURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockMockClient)(nil).SetBaseURL), baseURL)
}

// SetBasicAuth mocks base method.
func (m *MockMockClient) SetBasicAuth(username, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBasicAuth", username, password)
}

// SetBasicAuth indicates an expected call of SetBasicAuth.
func (mr *MockMockClientMockRecorder) SetBasicAuth(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBasicAuth", reflect.TypeOf((*MockMockClient)(nil).SetBasicAuth), username, password)
}

// SetBearerToken mocks base method.
func (m *MockMockClient) SetBearerToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBearerToken", token)
}

// SetBearerToken indicates an expected call of SetBearerToken.
func (mr *MockMockClientMockRecorder) SetBearerToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBearerToken", reflect.TypeOf((*MockMockClient)(nil).SetBearerToken), token)
}

// SetTimeout mocks base method.
func (m *MockMockClient) SetTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", timeout)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockMockClientMockRecorder) SetTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockMockClient)(nil).SetTimeout), timeout)
}

// SetUserAgent mocks base method.
func (m *MockMockClient) SetUserAgent(userAgent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserAgent", userAgent)
}

// SetUserAgent indicates an expected call of SetUserAgent.
func (mr *MockMockClientMockRecorder) SetUserAgent(userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAgent", reflect.TypeOf((*MockMockClient)(nil).SetUserAgent), userAgent)
}

// StartRecording mocks base method.
func (m *MockMockClient) StartRecording() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecording")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRecording indicates an expected call of StartRecording.
func (mr *MockMockClientMockRecorder) StartRecording() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecording", reflect.TypeOf((*MockMockClient)(nil).StartRecording))
}

// StopRecording mocks base method.
func (m *MockMockClient) StopRecording() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRecording")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRecording indicates an expected call of StopRecording.
func (mr *MockMockClientMockRecorder) StopRecording() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRecording", reflect.TypeOf((*MockMockClient)(nil).StopRecording))
}

// MockMockCondition is a mock of MockCondition interface.
type MockMockCondition struct {
	ctrl     *gomock.Controller
	recorder *MockMockConditionMockRecorder
	isgomock struct{}
}

// MockMockConditionMockRecorder is the mock recorder for MockMockCondition.
type MockMockConditionMockRecorder struct {
	mock *MockMockCondition
}

// NewMockMockCondition creates a new mock instance.
func NewMockMockCondition(ctrl *gomock.Controller) *MockMockCondition {
	mock := &MockMockCondition{ctrl: ctrl}
	mock.recorder = &MockMockConditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockCondition) EXPECT() *MockMockConditionMockRecorder {
	return m.recorder
}

// Matches mocks base method.
func (m *MockMockCondition) Matches(ctx context.Context, req *httpclient.Request) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", ctx, req)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Matches indicates an expected call of Matches.
func (mr *MockMockConditionMockRecorder) Matches(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockMockCondition)(nil).Matches), ctx, req)
}

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
	isgomock struct{}
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// ExportJSON mocks base method.
func (m *MockMetricsCollector) ExportJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportJSON indicates an expected call of ExportJSON.
func (mr *MockMetricsCollectorMockRecorder) ExportJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportJSON", reflect.TypeOf((*MockMetricsCollector)(nil).ExportJSON))
}

// ExportPrometheus mocks base method.
func (m *MockMetricsCollector) ExportPrometheus() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPrometheus")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPrometheus indicates an expected call of ExportPrometheus.
func (mr *MockMetricsCollectorMockRecorder) ExportPrometheus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPrometheus", reflect.TypeOf((*MockMetricsCollector)(nil).ExportPrometheus))
}

// GetMetrics mocks base method.
func (m *MockMetricsCollector) GetMetrics() *httpclient.HTTPMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(*httpclient.HTTPMetrics)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsCollectorMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).GetMetrics))
}

// RecordRequest mocks base method.
func (m *MockMetricsCollector) RecordRequest(ctx context.Context, req *httpclient.Request, resp *httpclient.Response, duration time.Duration, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRequest", ctx, req, resp, duration, err)
}

// RecordRequest indicates an expected call of RecordRequest.
func (mr *MockMetricsCollectorMockRecorder) RecordRequest(ctx, req, resp, duration, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRequest", reflect.TypeOf((*MockMetricsCollector)(nil).RecordRequest), ctx, req, resp, duration, err)
}

// Reset mocks base method.
func (m *MockMetricsCollector) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockMetricsCollectorMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMetricsCollector)(nil).Reset))
}

// MockHTTPService is a mock of HTTPService interface.
type MockHTTPService struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServiceMockRecorder
	isgomock struct{}
}

// MockHTTPServiceMockRecorder is the mock recorder for MockHTTPService.
type MockHTTPServiceMockRecorder struct {
	mock *MockHTTPService
}

// NewMockHTTPService creates a new mock instance.
func NewMockHTTPService(ctrl *gomock.Controller) *MockHTTPService {
	mock := &MockHTTPService{ctrl: ctrl}
	mock.recorder = &MockHTTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPService) EXPECT() *MockHTTPServiceMockRecorder {
	return m.recorder
}

// AddDefaultHeader mocks base method.
func (m *MockHTTPService) AddDefaultHeader(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDefaultHeader", key, value)
}

// AddDefaultHeader indicates an expected call of AddDefaultHeader.
func (mr *MockHTTPServiceMockRecorder) AddDefaultHeader(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultHeader", reflect.TypeOf((*MockHTTPService)(nil).AddDefaultHeader), key, value)
}

// AddRequestMiddleware mocks base method.
func (m *MockHTTPService) AddRequestMiddleware(middleware httpclient.RequestMiddleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRequestMiddleware", middleware)
}

// AddRequestMiddleware indicates an expected call of AddRequestMiddleware.
func (mr *MockHTTPServiceMockRecorder) AddRequestMiddleware(middleware any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestMiddleware", reflect.TypeOf((*MockHTTPService)(nil).AddRequestMiddleware), middleware)
}

// AddResponseMiddleware mocks base method.
func (m *MockHTTPService) AddResponseMiddleware(middleware httpclient.ResponseMiddleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddResponseMiddleware", middleware)
}

// AddResponseMiddleware indicates an expected call of AddResponseMiddleware.
func (mr *MockHTTPServiceMockRecorder) AddResponseMiddleware(middleware any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResponseMiddleware", reflect.TypeOf((*MockHTTPService)(nil).AddResponseMiddleware), middleware)
}

// Allow mocks base method.
func (m *MockHTTPService) Allow(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockHTTPServiceMockRecorder) Allow(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockHTTPService)(nil).Allow), ctx)
}

// Delete mocks base method.
func (m *MockHTTPService) Delete(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHTTPServiceMockRecorder) Delete(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPService)(nil).Delete), ctx, url)
}

// Do mocks base method.
func (m *MockHTTPService) Do(ctx context.Context, req *httpclient.Request) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPServiceMockRecorder) Do(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPService)(nil).Do), ctx, req)
}

// ExportJSON mocks base method.
func (m *MockHTTPService) ExportJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportJSON indicates an expected call of ExportJSON.
func (mr *MockHTTPServiceMockRecorder) ExportJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportJSON", reflect.TypeOf((*MockHTTPService)(nil).ExportJSON))
}

// ExportPrometheus mocks base method.
func (m *MockHTTPService) ExportPrometheus() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPrometheus")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPrometheus indicates an expected call of ExportPrometheus.
func (mr *MockHTTPServiceMockRecorder) ExportPrometheus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPrometheus", reflect.TypeOf((*MockHTTPService)(nil).ExportPrometheus))
}

// Get mocks base method.
func (m *MockHTTPService) Get(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPServiceMockRecorder) Get(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPService)(nil).Get), ctx, url)
}

// GetCached mocks base method.
func (m *MockHTTPService) GetCached(ctx context.Context, req *httpclient.Request) (*httpclient.Response, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCached", ctx, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCached indicates an expected call of GetCached.
func (mr *MockHTTPServiceMockRecorder) GetCached(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCached", reflect.TypeOf((*MockHTTPService)(nil).GetCached), ctx, req)
}

// GetLimitInfo mocks base method.
func (m *MockHTTPService) GetLimitInfo() *httpclient.RateLimitInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitInfo")
	ret0, _ := ret[0].(*httpclient.RateLimitInfo)
	return ret0
}

// GetLimitInfo indicates an expected call of GetLimitInfo.
func (mr *MockHTTPServiceMockRecorder) GetLimitInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitInfo", reflect.TypeOf((*MockHTTPService)(nil).GetLimitInfo))
}

// GetLogs mocks base method.
func (m *MockHTTPService) GetLogs(ctx context.Context, filters httpclient.LogFilters) ([]httpclient.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, filters)
	ret0, _ := ret[0].([]httpclient.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockHTTPServiceMockRecorder) GetLogs(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockHTTPService)(nil).GetLogs), ctx, filters)
}

// GetMetrics mocks base method.
func (m *MockHTTPService) GetMetrics() *httpclient.HTTPMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(*httpclient.HTTPMetrics)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockHTTPServiceMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockHTTPService)(nil).GetMetrics))
}

// GetRetryDelay mocks base method.
func (m *MockHTTPService) GetRetryDelay(ctx context.Context, attempt int) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryDelay", ctx, attempt)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRetryDelay indicates an expected call of GetRetryDelay.
func (mr *MockHTTPServiceMockRecorder) GetRetryDelay(ctx, attempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryDelay", reflect.TypeOf((*MockHTTPService)(nil).GetRetryDelay), ctx, attempt)
}

// GetStats mocks base method.
func (m *MockHTTPService) GetStats() *httpclient.CacheStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*httpclient.CacheStats)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockHTTPServiceMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockHTTPService)(nil).GetStats))
}

// Head mocks base method.
func (m *MockHTTPService) Head(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockHTTPServiceMockRecorder) Head(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockHTTPService)(nil).Head), ctx, url)
}

// Invalidate mocks base method.
func (m *MockHTTPService) Invalidate(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockHTTPServiceMockRecorder) Invalidate(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockHTTPService)(nil).Invalidate), ctx, pattern)
}

// LogRequest mocks base method.
func (m *MockHTTPService) LogRequest(ctx context.Context, req *httpclient.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogRequest indicates an expected call of LogRequest.
func (mr *MockHTTPServiceMockRecorder) LogRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRequest", reflect.TypeOf((*MockHTTPService)(nil).LogRequest), ctx, req)
}

// LogResponse mocks base method.
func (m *MockHTTPService) LogResponse(ctx context.Context, req *httpclient.Request, resp *httpclient.Response, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogResponse", ctx, req, resp, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogResponse indicates an expected call of LogResponse.
func (mr *MockHTTPServiceMockRecorder) LogResponse(ctx, req, resp, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogResponse", reflect.TypeOf((*MockHTTPService)(nil).LogResponse), ctx, req, resp, err)
}

// MaxRetries mocks base method.
func (m *MockHTTPService) MaxRetries() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxRetries indicates an expected call of MaxRetries.
func (mr *MockHTTPServiceMockRecorder) MaxRetries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxRetries", reflect.TypeOf((*MockHTTPService)(nil).MaxRetries))
}

// Options mocks base method.
func (m *MockHTTPService) Options(ctx context.Context, url string) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", ctx, url)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Options indicates an expected call of Options.
func (mr *MockHTTPServiceMockRecorder) Options(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockHTTPService)(nil).Options), ctx, url)
}

// Patch mocks base method.
func (m *MockHTTPService) Patch(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockHTTPServiceMockRecorder) Patch(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockHTTPService)(nil).Patch), ctx, url, body)
}

// Post mocks base method.
func (m *MockHTTPService) Post(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPServiceMockRecorder) Post(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPService)(nil).Post), ctx, url, body)
}

// Put mocks base method.
func (m *MockHTTPService) Put(ctx context.Context, url string, body io.Reader) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url, body)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHTTPServiceMockRecorder) Put(ctx, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHTTPService)(nil).Put), ctx, url, body)
}

// RecordRequest mocks base method.
func (m *MockHTTPService) RecordRequest(ctx context.Context, req *httpclient.Request, resp *httpclient.Response, duration time.Duration, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRequest", ctx, req, resp, duration, err)
}

// RecordRequest indicates an expected call of RecordRequest.
func (mr *MockHTTPServiceMockRecorder) RecordRequest(ctx, req, resp, duration, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRequest", reflect.TypeOf((*MockHTTPService)(nil).RecordRequest), ctx, req, resp, duration, err)
}

// RemoveDefaultHeader mocks base method.
func (m *MockHTTPService) RemoveDefaultHeader(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveDefaultHeader", key)
}

// RemoveDefaultHeader indicates an expected call of RemoveDefaultHeader.
func (mr *MockHTTPServiceMockRecorder) RemoveDefaultHeader(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultHeader", reflect.TypeOf((*MockHTTPService)(nil).RemoveDefaultHeader), key)
}

// Reset mocks base method.
func (m *MockHTTPService) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockHTTPServiceMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockHTTPService)(nil).Reset))
}

// SetAPIKey mocks base method.
func (m *MockHTTPService) SetAPIKey(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIKey", key, value)
}

// SetAPIKey indicates an expected call of SetAPIKey.
func (mr *MockHTTPServiceMockRecorder) SetAPIKey(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIKey", reflect.TypeOf((*MockHTTPService)(nil).SetAPIKey), key, value)
}

// SetBaseURL mocks base method.
func (m *MockHTTPService) SetBaseURL(baseURL string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", baseURL)
}

// SetBaseURL indicates an expected call of SetBaseURL.
func (mr *MockHTTPServiceMockRecorder) SetBaseURL(baseURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockHTTPService)(nil).SetBaseURL), baseURL)
}

// SetBasicAuth mocks base method.
func (m *MockHTTPService) SetBasicAuth(username, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBasicAuth", username, password)
}

// SetBasicAuth indicates an expected call of SetBasicAuth.
func (mr *MockHTTPServiceMockRecorder) SetBasicAuth(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBasicAuth", reflect.TypeOf((*MockHTTPService)(nil).SetBasicAuth), username, password)
}

// SetBearerToken mocks base method.
func (m *MockHTTPService) SetBearerToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBearerToken", token)
}

// SetBearerToken indicates an expected call of SetBearerToken.
func (mr *MockHTTPServiceMockRecorder) SetBearerToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBearerToken", reflect.TypeOf((*MockHTTPService)(nil).SetBearerToken), token)
}

// SetLogLevel mocks base method.
func (m *MockHTTPService) SetLogLevel(level httpclient.LogLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", level)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockHTTPServiceMockRecorder) SetLogLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockHTTPService)(nil).SetLogLevel), level)
}

// SetTimeout mocks base method.
func (m *MockHTTPService) SetTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", timeout)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockHTTPServiceMockRecorder) SetTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockHTTPService)(nil).SetTimeout), timeout)
}

// SetUserAgent mocks base method.
func (m *MockHTTPService) SetUserAgent(userAgent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserAgent", userAgent)
}

// SetUserAgent indicates an expected call of SetUserAgent.
func (mr *MockHTTPServiceMockRecorder) SetUserAgent(userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAgent", reflect.TypeOf((*MockHTTPService)(nil).SetUserAgent), userAgent)
}

// ShouldCache mocks base method.
func (m *MockHTTPService) ShouldCache(ctx context.Context, req *httpclient.Request, resp *httpclient.Response) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldCache", ctx, req, resp)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldCache indicates an expected call of ShouldCache.
func (mr *MockHTTPServiceMockRecorder) ShouldCache(ctx, req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldCache", reflect.TypeOf((*MockHTTPService)(nil).ShouldCache), ctx, req, resp)
}

// ShouldRetry mocks base method.
func (m *MockHTTPService) ShouldRetry(ctx context.Context, req *httpclient.Request, resp *httpclient.Response, err error, attempt int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRetry", ctx, req, resp, err, attempt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldRetry indicates an expected call of ShouldRetry.
func (mr *MockHTTPServiceMockRecorder) ShouldRetry(ctx, req, resp, err, attempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRetry", reflect.TypeOf((*MockHTTPService)(nil).ShouldRetry), ctx, req, resp, err, attempt)
}

// Store mocks base method.
func (m *MockHTTPService) Store(ctx context.Context, req *httpclient.Request, resp *httpclient.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockHTTPServiceMockRecorder) Store(ctx, req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockHTTPService)(nil).Store), ctx, req, resp)
}

// Wait mocks base method.
func (m *MockHTTPService) Wait(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockHTTPServiceMockRecorder) Wait(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockHTTPService)(nil).Wait), ctx)
}
