// Code generated by MockGen. DO NOT EDIT.
// Source: internal/filesystem/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/filesystem/interfaces.go -destination=internal/filesystem/mocks/filesystem_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	fs "io/fs"
	reflect "reflect"

	filesystem "github.com/gizzahub/gzh-manager-go/internal/filesystem"
	gomock "go.uber.org/mock/gomock"
)

// MockFileSystem is a mock of FileSystem interface.
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
	isgomock struct{}
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem.
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance.
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return m.recorder
}

// Abs mocks base method.
func (m *MockFileSystem) Abs(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abs", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Abs indicates an expected call of Abs.
func (mr *MockFileSystemMockRecorder) Abs(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abs", reflect.TypeOf((*MockFileSystem)(nil).Abs), path)
}

// AppendFile mocks base method.
func (m *MockFileSystem) AppendFile(ctx context.Context, filename string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendFile", ctx, filename, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendFile indicates an expected call of AppendFile.
func (mr *MockFileSystemMockRecorder) AppendFile(ctx, filename, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendFile", reflect.TypeOf((*MockFileSystem)(nil).AppendFile), ctx, filename, data)
}

// Base mocks base method.
func (m *MockFileSystem) Base(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockFileSystemMockRecorder) Base(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockFileSystem)(nil).Base), path)
}

// Clean mocks base method.
func (m *MockFileSystem) Clean(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockFileSystemMockRecorder) Clean(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockFileSystem)(nil).Clean), path)
}

// CopyFile mocks base method.
func (m *MockFileSystem) CopyFile(ctx context.Context, src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", ctx, src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockFileSystemMockRecorder) CopyFile(ctx, src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileSystem)(nil).CopyFile), ctx, src, dst)
}

// CreateFile mocks base method.
func (m *MockFileSystem) CreateFile(ctx context.Context, name string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, name)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileSystemMockRecorder) CreateFile(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileSystem)(nil).CreateFile), ctx, name)
}

// CreateSymlink mocks base method.
func (m *MockFileSystem) CreateSymlink(ctx context.Context, oldname, newname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSymlink", ctx, oldname, newname)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSymlink indicates an expected call of CreateSymlink.
func (mr *MockFileSystemMockRecorder) CreateSymlink(ctx, oldname, newname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSymlink", reflect.TypeOf((*MockFileSystem)(nil).CreateSymlink), ctx, oldname, newname)
}

// Dir mocks base method.
func (m *MockFileSystem) Dir(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockFileSystemMockRecorder) Dir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockFileSystem)(nil).Dir), path)
}

// Exists mocks base method.
func (m *MockFileSystem) Exists(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockFileSystemMockRecorder) Exists(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFileSystem)(nil).Exists), ctx, path)
}

// Ext mocks base method.
func (m *MockFileSystem) Ext(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ext", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Ext indicates an expected call of Ext.
func (mr *MockFileSystemMockRecorder) Ext(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ext", reflect.TypeOf((*MockFileSystem)(nil).Ext), path)
}

// GetFileInfo mocks base method.
func (m *MockFileSystem) GetFileInfo(ctx context.Context, path string) (*filesystem.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", ctx, path)
	ret0, _ := ret[0].(*filesystem.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFileSystemMockRecorder) GetFileInfo(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFileSystem)(nil).GetFileInfo), ctx, path)
}

// GetFileSize mocks base method.
func (m *MockFileSystem) GetFileSize(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSize indicates an expected call of GetFileSize.
func (mr *MockFileSystemMockRecorder) GetFileSize(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockFileSystem)(nil).GetFileSize), ctx, path)
}

// IsDir mocks base method.
func (m *MockFileSystem) IsDir(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFileSystemMockRecorder) IsDir(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFileSystem)(nil).IsDir), ctx, path)
}

// IsFile mocks base method.
func (m *MockFileSystem) IsFile(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFile", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFile indicates an expected call of IsFile.
func (mr *MockFileSystemMockRecorder) IsFile(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFile", reflect.TypeOf((*MockFileSystem)(nil).IsFile), ctx, path)
}

// Join mocks base method.
func (m *MockFileSystem) Join(paths ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockFileSystemMockRecorder) Join(paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockFileSystem)(nil).Join), paths...)
}

// ListDir mocks base method.
func (m *MockFileSystem) ListDir(ctx context.Context, path string) ([]filesystem.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDir", ctx, path)
	ret0, _ := ret[0].([]filesystem.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDir indicates an expected call of ListDir.
func (mr *MockFileSystemMockRecorder) ListDir(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDir", reflect.TypeOf((*MockFileSystem)(nil).ListDir), ctx, path)
}

// MkdirAll mocks base method.
func (m *MockFileSystem) MkdirAll(ctx context.Context, path string, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", ctx, path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileSystemMockRecorder) MkdirAll(ctx, path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystem)(nil).MkdirAll), ctx, path, perm)
}

// MoveFile mocks base method.
func (m *MockFileSystem) MoveFile(ctx context.Context, src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFile", ctx, src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFile indicates an expected call of MoveFile.
func (mr *MockFileSystemMockRecorder) MoveFile(ctx, src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFile", reflect.TypeOf((*MockFileSystem)(nil).MoveFile), ctx, src, dst)
}

// OpenFile mocks base method.
func (m *MockFileSystem) OpenFile(ctx context.Context, name string, flag int, perm fs.FileMode) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", ctx, name, flag, perm)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileSystemMockRecorder) OpenFile(ctx, name, flag, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileSystem)(nil).OpenFile), ctx, name, flag, perm)
}

// ReadFile mocks base method.
func (m *MockFileSystem) ReadFile(ctx context.Context, filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileSystemMockRecorder) ReadFile(ctx, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystem)(nil).ReadFile), ctx, filename)
}

// ReadSymlink mocks base method.
func (m *MockFileSystem) ReadSymlink(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSymlink", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSymlink indicates an expected call of ReadSymlink.
func (mr *MockFileSystemMockRecorder) ReadSymlink(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSymlink", reflect.TypeOf((*MockFileSystem)(nil).ReadSymlink), ctx, name)
}

// RemoveAll mocks base method.
func (m *MockFileSystem) RemoveAll(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileSystemMockRecorder) RemoveAll(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileSystem)(nil).RemoveAll), ctx, path)
}

// TempDir mocks base method.
func (m *MockFileSystem) TempDir(ctx context.Context, dir, pattern string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDir", ctx, dir, pattern)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempDir indicates an expected call of TempDir.
func (mr *MockFileSystemMockRecorder) TempDir(ctx, dir, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDir", reflect.TypeOf((*MockFileSystem)(nil).TempDir), ctx, dir, pattern)
}

// TempFile mocks base method.
func (m *MockFileSystem) TempFile(ctx context.Context, dir, pattern string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempFile", ctx, dir, pattern)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempFile indicates an expected call of TempFile.
func (mr *MockFileSystemMockRecorder) TempFile(ctx, dir, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempFile", reflect.TypeOf((*MockFileSystem)(nil).TempFile), ctx, dir, pattern)
}

// WalkDir mocks base method.
func (m *MockFileSystem) WalkDir(ctx context.Context, root string, fn func(string, filesystem.FileInfo, error) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkDir", ctx, root, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkDir indicates an expected call of WalkDir.
func (mr *MockFileSystemMockRecorder) WalkDir(ctx, root, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDir", reflect.TypeOf((*MockFileSystem)(nil).WalkDir), ctx, root, fn)
}

// WriteFile mocks base method.
func (m *MockFileSystem) WriteFile(ctx context.Context, filename string, data []byte, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileSystemMockRecorder) WriteFile(ctx, filename, data, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileSystem)(nil).WriteFile), ctx, filename, data, perm)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
}

// Read mocks base method.
func (m *MockFile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), p)
}

// ReadAt mocks base method.
func (m *MockFile) ReadAt(b []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", b, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockFileMockRecorder) ReadAt(b, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFile)(nil).ReadAt), b, off)
}

// Seek mocks base method.
func (m *MockFile) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockFileMockRecorder) Seek(offset, whence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFile)(nil).Seek), offset, whence)
}

// Stat mocks base method.
func (m *MockFile) Stat() (filesystem.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(filesystem.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat))
}

// Sync mocks base method.
func (m *MockFile) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockFileMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockFile)(nil).Sync))
}

// Truncate mocks base method.
func (m *MockFile) Truncate(size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockFileMockRecorder) Truncate(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockFile)(nil).Truncate), size)
}

// Write mocks base method.
func (m *MockFile) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockFileMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFile)(nil).Write), p)
}

// WriteAt mocks base method.
func (m *MockFile) WriteAt(b []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", b, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockFileMockRecorder) WriteAt(b, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFile)(nil).WriteAt), b, off)
}

// WriteString mocks base method.
func (m *MockFile) WriteString(s string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString.
func (mr *MockFileMockRecorder) WriteString(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockFile)(nil).WriteString), s)
}

// MockWatchService is a mock of WatchService interface.
type MockWatchService struct {
	ctrl     *gomock.Controller
	recorder *MockWatchServiceMockRecorder
	isgomock struct{}
}

// MockWatchServiceMockRecorder is the mock recorder for MockWatchService.
type MockWatchServiceMockRecorder struct {
	mock *MockWatchService
}

// NewMockWatchService creates a new mock instance.
func NewMockWatchService(ctrl *gomock.Controller) *MockWatchService {
	mock := &MockWatchService{ctrl: ctrl}
	mock.recorder = &MockWatchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchService) EXPECT() *MockWatchServiceMockRecorder {
	return m.recorder
}

// AddPath mocks base method.
func (m *MockWatchService) AddPath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPath indicates an expected call of AddPath.
func (mr *MockWatchServiceMockRecorder) AddPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPath", reflect.TypeOf((*MockWatchService)(nil).AddPath), ctx, path)
}

// Errors mocks base method.
func (m *MockWatchService) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockWatchServiceMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockWatchService)(nil).Errors))
}

// Events mocks base method.
func (m *MockWatchService) Events() <-chan filesystem.WatchEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(<-chan filesystem.WatchEvent)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockWatchServiceMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockWatchService)(nil).Events))
}

// RemovePath mocks base method.
func (m *MockWatchService) RemovePath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePath indicates an expected call of RemovePath.
func (mr *MockWatchServiceMockRecorder) RemovePath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePath", reflect.TypeOf((*MockWatchService)(nil).RemovePath), ctx, path)
}

// Stop mocks base method.
func (m *MockWatchService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockWatchServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWatchService)(nil).Stop))
}

// Watch mocks base method.
func (m *MockWatchService) Watch(ctx context.Context, paths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockWatchServiceMockRecorder) Watch(ctx, paths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWatchService)(nil).Watch), ctx, paths)
}

// MockPermissionManager is a mock of PermissionManager interface.
type MockPermissionManager struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionManagerMockRecorder
	isgomock struct{}
}

// MockPermissionManagerMockRecorder is the mock recorder for MockPermissionManager.
type MockPermissionManagerMockRecorder struct {
	mock *MockPermissionManager
}

// NewMockPermissionManager creates a new mock instance.
func NewMockPermissionManager(ctrl *gomock.Controller) *MockPermissionManager {
	mock := &MockPermissionManager{ctrl: ctrl}
	mock.recorder = &MockPermissionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionManager) EXPECT() *MockPermissionManagerMockRecorder {
	return m.recorder
}

// ChangeOwner mocks base method.
func (m *MockPermissionManager) ChangeOwner(ctx context.Context, path, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOwner", ctx, path, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOwner indicates an expected call of ChangeOwner.
func (mr *MockPermissionManagerMockRecorder) ChangeOwner(ctx, path, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOwner", reflect.TypeOf((*MockPermissionManager)(nil).ChangeOwner), ctx, path, owner)
}

// GetOwner mocks base method.
func (m *MockPermissionManager) GetOwner(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockPermissionManagerMockRecorder) GetOwner(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockPermissionManager)(nil).GetOwner), ctx, path)
}

// GetPermissions mocks base method.
func (m *MockPermissionManager) GetPermissions(ctx context.Context, path string) (fs.FileMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", ctx, path)
	ret0, _ := ret[0].(fs.FileMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockPermissionManagerMockRecorder) GetPermissions(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockPermissionManager)(nil).GetPermissions), ctx, path)
}

// IsExecutable mocks base method.
func (m *MockPermissionManager) IsExecutable(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExecutable", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExecutable indicates an expected call of IsExecutable.
func (mr *MockPermissionManagerMockRecorder) IsExecutable(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExecutable", reflect.TypeOf((*MockPermissionManager)(nil).IsExecutable), ctx, path)
}

// IsReadable mocks base method.
func (m *MockPermissionManager) IsReadable(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadable", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadable indicates an expected call of IsReadable.
func (mr *MockPermissionManagerMockRecorder) IsReadable(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadable", reflect.TypeOf((*MockPermissionManager)(nil).IsReadable), ctx, path)
}

// IsWritable mocks base method.
func (m *MockPermissionManager) IsWritable(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWritable", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWritable indicates an expected call of IsWritable.
func (mr *MockPermissionManagerMockRecorder) IsWritable(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWritable", reflect.TypeOf((*MockPermissionManager)(nil).IsWritable), ctx, path)
}

// SetPermissions mocks base method.
func (m *MockPermissionManager) SetPermissions(ctx context.Context, path string, mode fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPermissions", ctx, path, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPermissions indicates an expected call of SetPermissions.
func (mr *MockPermissionManagerMockRecorder) SetPermissions(ctx, path, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermissions", reflect.TypeOf((*MockPermissionManager)(nil).SetPermissions), ctx, path, mode)
}

// MockArchiveService is a mock of ArchiveService interface.
type MockArchiveService struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveServiceMockRecorder
	isgomock struct{}
}

// MockArchiveServiceMockRecorder is the mock recorder for MockArchiveService.
type MockArchiveServiceMockRecorder struct {
	mock *MockArchiveService
}

// NewMockArchiveService creates a new mock instance.
func NewMockArchiveService(ctrl *gomock.Controller) *MockArchiveService {
	mock := &MockArchiveService{ctrl: ctrl}
	mock.recorder = &MockArchiveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveService) EXPECT() *MockArchiveServiceMockRecorder {
	return m.recorder
}

// CreateArchive mocks base method.
func (m *MockArchiveService) CreateArchive(ctx context.Context, sourcePath, archivePath string, format filesystem.ArchiveFormat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchive", ctx, sourcePath, archivePath, format)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArchive indicates an expected call of CreateArchive.
func (mr *MockArchiveServiceMockRecorder) CreateArchive(ctx, sourcePath, archivePath, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchive", reflect.TypeOf((*MockArchiveService)(nil).CreateArchive), ctx, sourcePath, archivePath, format)
}

// ExtractArchive mocks base method.
func (m *MockArchiveService) ExtractArchive(ctx context.Context, archivePath, destPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractArchive", ctx, archivePath, destPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractArchive indicates an expected call of ExtractArchive.
func (mr *MockArchiveServiceMockRecorder) ExtractArchive(ctx, archivePath, destPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractArchive", reflect.TypeOf((*MockArchiveService)(nil).ExtractArchive), ctx, archivePath, destPath)
}

// GetSupportedFormats mocks base method.
func (m *MockArchiveService) GetSupportedFormats() []filesystem.ArchiveFormat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFormats")
	ret0, _ := ret[0].([]filesystem.ArchiveFormat)
	return ret0
}

// GetSupportedFormats indicates an expected call of GetSupportedFormats.
func (mr *MockArchiveServiceMockRecorder) GetSupportedFormats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFormats", reflect.TypeOf((*MockArchiveService)(nil).GetSupportedFormats))
}

// ListArchive mocks base method.
func (m *MockArchiveService) ListArchive(ctx context.Context, archivePath string) ([]filesystem.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchive", ctx, archivePath)
	ret0, _ := ret[0].([]filesystem.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchive indicates an expected call of ListArchive.
func (mr *MockArchiveServiceMockRecorder) ListArchive(ctx, archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchive", reflect.TypeOf((*MockArchiveService)(nil).ListArchive), ctx, archivePath)
}

// MockBackupService is a mock of BackupService interface.
type MockBackupService struct {
	ctrl     *gomock.Controller
	recorder *MockBackupServiceMockRecorder
	isgomock struct{}
}

// MockBackupServiceMockRecorder is the mock recorder for MockBackupService.
type MockBackupServiceMockRecorder struct {
	mock *MockBackupService
}

// NewMockBackupService creates a new mock instance.
func NewMockBackupService(ctrl *gomock.Controller) *MockBackupService {
	mock := &MockBackupService{ctrl: ctrl}
	mock.recorder = &MockBackupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackupService) EXPECT() *MockBackupServiceMockRecorder {
	return m.recorder
}

// CreateBackup mocks base method.
func (m *MockBackupService) CreateBackup(ctx context.Context, sourcePath, backupPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", ctx, sourcePath, backupPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockBackupServiceMockRecorder) CreateBackup(ctx, sourcePath, backupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockBackupService)(nil).CreateBackup), ctx, sourcePath, backupPath)
}

// DeleteBackup mocks base method.
func (m *MockBackupService) DeleteBackup(ctx context.Context, backupPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", ctx, backupPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockBackupServiceMockRecorder) DeleteBackup(ctx, backupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockBackupService)(nil).DeleteBackup), ctx, backupPath)
}

// ListBackups mocks base method.
func (m *MockBackupService) ListBackups(ctx context.Context, path string) ([]filesystem.BackupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", ctx, path)
	ret0, _ := ret[0].([]filesystem.BackupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockBackupServiceMockRecorder) ListBackups(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockBackupService)(nil).ListBackups), ctx, path)
}

// RestoreBackup mocks base method.
func (m *MockBackupService) RestoreBackup(ctx context.Context, backupPath, destPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreBackup", ctx, backupPath, destPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreBackup indicates an expected call of RestoreBackup.
func (mr *MockBackupServiceMockRecorder) RestoreBackup(ctx, backupPath, destPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBackup", reflect.TypeOf((*MockBackupService)(nil).RestoreBackup), ctx, backupPath, destPath)
}

// VerifyBackup mocks base method.
func (m *MockBackupService) VerifyBackup(ctx context.Context, backupPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyBackup", ctx, backupPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyBackup indicates an expected call of VerifyBackup.
func (mr *MockBackupServiceMockRecorder) VerifyBackup(ctx, backupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBackup", reflect.TypeOf((*MockBackupService)(nil).VerifyBackup), ctx, backupPath)
}

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
	isgomock struct{}
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// FindDirectories mocks base method.
func (m *MockSearchService) FindDirectories(ctx context.Context, root, pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDirectories", ctx, root, pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDirectories indicates an expected call of FindDirectories.
func (mr *MockSearchServiceMockRecorder) FindDirectories(ctx, root, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDirectories", reflect.TypeOf((*MockSearchService)(nil).FindDirectories), ctx, root, pattern)
}

// FindFiles mocks base method.
func (m *MockSearchService) FindFiles(ctx context.Context, root, pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFiles", ctx, root, pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFiles indicates an expected call of FindFiles.
func (mr *MockSearchServiceMockRecorder) FindFiles(ctx, root, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFiles", reflect.TypeOf((*MockSearchService)(nil).FindFiles), ctx, root, pattern)
}

// FindInFiles mocks base method.
func (m *MockSearchService) FindInFiles(ctx context.Context, root, pattern string) ([]filesystem.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInFiles", ctx, root, pattern)
	ret0, _ := ret[0].([]filesystem.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInFiles indicates an expected call of FindInFiles.
func (mr *MockSearchServiceMockRecorder) FindInFiles(ctx, root, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInFiles", reflect.TypeOf((*MockSearchService)(nil).FindInFiles), ctx, root, pattern)
}

// SearchWithFilters mocks base method.
func (m *MockSearchService) SearchWithFilters(ctx context.Context, root string, filters filesystem.SearchFilters) ([]filesystem.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWithFilters", ctx, root, filters)
	ret0, _ := ret[0].([]filesystem.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithFilters indicates an expected call of SearchWithFilters.
func (mr *MockSearchServiceMockRecorder) SearchWithFilters(ctx, root, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithFilters", reflect.TypeOf((*MockSearchService)(nil).SearchWithFilters), ctx, root, filters)
}

// MockFileSystemService is a mock of FileSystemService interface.
type MockFileSystemService struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemServiceMockRecorder
	isgomock struct{}
}

// MockFileSystemServiceMockRecorder is the mock recorder for MockFileSystemService.
type MockFileSystemServiceMockRecorder struct {
	mock *MockFileSystemService
}

// NewMockFileSystemService creates a new mock instance.
func NewMockFileSystemService(ctrl *gomock.Controller) *MockFileSystemService {
	mock := &MockFileSystemService{ctrl: ctrl}
	mock.recorder = &MockFileSystemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemService) EXPECT() *MockFileSystemServiceMockRecorder {
	return m.recorder
}

// Abs mocks base method.
func (m *MockFileSystemService) Abs(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abs", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Abs indicates an expected call of Abs.
func (mr *MockFileSystemServiceMockRecorder) Abs(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abs", reflect.TypeOf((*MockFileSystemService)(nil).Abs), path)
}

// AddPath mocks base method.
func (m *MockFileSystemService) AddPath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPath indicates an expected call of AddPath.
func (mr *MockFileSystemServiceMockRecorder) AddPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPath", reflect.TypeOf((*MockFileSystemService)(nil).AddPath), ctx, path)
}

// AppendFile mocks base method.
func (m *MockFileSystemService) AppendFile(ctx context.Context, filename string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendFile", ctx, filename, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendFile indicates an expected call of AppendFile.
func (mr *MockFileSystemServiceMockRecorder) AppendFile(ctx, filename, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendFile", reflect.TypeOf((*MockFileSystemService)(nil).AppendFile), ctx, filename, data)
}

// Base mocks base method.
func (m *MockFileSystemService) Base(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockFileSystemServiceMockRecorder) Base(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockFileSystemService)(nil).Base), path)
}

// ChangeOwner mocks base method.
func (m *MockFileSystemService) ChangeOwner(ctx context.Context, path, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOwner", ctx, path, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOwner indicates an expected call of ChangeOwner.
func (mr *MockFileSystemServiceMockRecorder) ChangeOwner(ctx, path, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOwner", reflect.TypeOf((*MockFileSystemService)(nil).ChangeOwner), ctx, path, owner)
}

// Clean mocks base method.
func (m *MockFileSystemService) Clean(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockFileSystemServiceMockRecorder) Clean(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockFileSystemService)(nil).Clean), path)
}

// CopyFile mocks base method.
func (m *MockFileSystemService) CopyFile(ctx context.Context, src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", ctx, src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockFileSystemServiceMockRecorder) CopyFile(ctx, src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileSystemService)(nil).CopyFile), ctx, src, dst)
}

// CreateArchive mocks base method.
func (m *MockFileSystemService) CreateArchive(ctx context.Context, sourcePath, archivePath string, format filesystem.ArchiveFormat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchive", ctx, sourcePath, archivePath, format)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArchive indicates an expected call of CreateArchive.
func (mr *MockFileSystemServiceMockRecorder) CreateArchive(ctx, sourcePath, archivePath, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchive", reflect.TypeOf((*MockFileSystemService)(nil).CreateArchive), ctx, sourcePath, archivePath, format)
}

// CreateBackup mocks base method.
func (m *MockFileSystemService) CreateBackup(ctx context.Context, sourcePath, backupPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", ctx, sourcePath, backupPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockFileSystemServiceMockRecorder) CreateBackup(ctx, sourcePath, backupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockFileSystemService)(nil).CreateBackup), ctx, sourcePath, backupPath)
}

// CreateFile mocks base method.
func (m *MockFileSystemService) CreateFile(ctx context.Context, name string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, name)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileSystemServiceMockRecorder) CreateFile(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileSystemService)(nil).CreateFile), ctx, name)
}

// CreateSymlink mocks base method.
func (m *MockFileSystemService) CreateSymlink(ctx context.Context, oldname, newname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSymlink", ctx, oldname, newname)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSymlink indicates an expected call of CreateSymlink.
func (mr *MockFileSystemServiceMockRecorder) CreateSymlink(ctx, oldname, newname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSymlink", reflect.TypeOf((*MockFileSystemService)(nil).CreateSymlink), ctx, oldname, newname)
}

// DeleteBackup mocks base method.
func (m *MockFileSystemService) DeleteBackup(ctx context.Context, backupPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", ctx, backupPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockFileSystemServiceMockRecorder) DeleteBackup(ctx, backupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockFileSystemService)(nil).DeleteBackup), ctx, backupPath)
}

// Dir mocks base method.
func (m *MockFileSystemService) Dir(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockFileSystemServiceMockRecorder) Dir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockFileSystemService)(nil).Dir), path)
}

// Errors mocks base method.
func (m *MockFileSystemService) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockFileSystemServiceMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockFileSystemService)(nil).Errors))
}

// Events mocks base method.
func (m *MockFileSystemService) Events() <-chan filesystem.WatchEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(<-chan filesystem.WatchEvent)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockFileSystemServiceMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockFileSystemService)(nil).Events))
}

// Exists mocks base method.
func (m *MockFileSystemService) Exists(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockFileSystemServiceMockRecorder) Exists(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFileSystemService)(nil).Exists), ctx, path)
}

// Ext mocks base method.
func (m *MockFileSystemService) Ext(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ext", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Ext indicates an expected call of Ext.
func (mr *MockFileSystemServiceMockRecorder) Ext(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ext", reflect.TypeOf((*MockFileSystemService)(nil).Ext), path)
}

// ExtractArchive mocks base method.
func (m *MockFileSystemService) ExtractArchive(ctx context.Context, archivePath, destPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractArchive", ctx, archivePath, destPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractArchive indicates an expected call of ExtractArchive.
func (mr *MockFileSystemServiceMockRecorder) ExtractArchive(ctx, archivePath, destPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractArchive", reflect.TypeOf((*MockFileSystemService)(nil).ExtractArchive), ctx, archivePath, destPath)
}

// FindDirectories mocks base method.
func (m *MockFileSystemService) FindDirectories(ctx context.Context, root, pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDirectories", ctx, root, pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDirectories indicates an expected call of FindDirectories.
func (mr *MockFileSystemServiceMockRecorder) FindDirectories(ctx, root, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDirectories", reflect.TypeOf((*MockFileSystemService)(nil).FindDirectories), ctx, root, pattern)
}

// FindFiles mocks base method.
func (m *MockFileSystemService) FindFiles(ctx context.Context, root, pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFiles", ctx, root, pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFiles indicates an expected call of FindFiles.
func (mr *MockFileSystemServiceMockRecorder) FindFiles(ctx, root, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFiles", reflect.TypeOf((*MockFileSystemService)(nil).FindFiles), ctx, root, pattern)
}

// FindInFiles mocks base method.
func (m *MockFileSystemService) FindInFiles(ctx context.Context, root, pattern string) ([]filesystem.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInFiles", ctx, root, pattern)
	ret0, _ := ret[0].([]filesystem.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInFiles indicates an expected call of FindInFiles.
func (mr *MockFileSystemServiceMockRecorder) FindInFiles(ctx, root, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInFiles", reflect.TypeOf((*MockFileSystemService)(nil).FindInFiles), ctx, root, pattern)
}

// GetFileInfo mocks base method.
func (m *MockFileSystemService) GetFileInfo(ctx context.Context, path string) (*filesystem.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", ctx, path)
	ret0, _ := ret[0].(*filesystem.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFileSystemServiceMockRecorder) GetFileInfo(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFileSystemService)(nil).GetFileInfo), ctx, path)
}

// GetFileSize mocks base method.
func (m *MockFileSystemService) GetFileSize(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSize indicates an expected call of GetFileSize.
func (mr *MockFileSystemServiceMockRecorder) GetFileSize(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockFileSystemService)(nil).GetFileSize), ctx, path)
}

// GetOwner mocks base method.
func (m *MockFileSystemService) GetOwner(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockFileSystemServiceMockRecorder) GetOwner(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockFileSystemService)(nil).GetOwner), ctx, path)
}

// GetPermissions mocks base method.
func (m *MockFileSystemService) GetPermissions(ctx context.Context, path string) (fs.FileMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", ctx, path)
	ret0, _ := ret[0].(fs.FileMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockFileSystemServiceMockRecorder) GetPermissions(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockFileSystemService)(nil).GetPermissions), ctx, path)
}

// GetSupportedFormats mocks base method.
func (m *MockFileSystemService) GetSupportedFormats() []filesystem.ArchiveFormat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFormats")
	ret0, _ := ret[0].([]filesystem.ArchiveFormat)
	return ret0
}

// GetSupportedFormats indicates an expected call of GetSupportedFormats.
func (mr *MockFileSystemServiceMockRecorder) GetSupportedFormats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFormats", reflect.TypeOf((*MockFileSystemService)(nil).GetSupportedFormats))
}

// IsDir mocks base method.
func (m *MockFileSystemService) IsDir(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFileSystemServiceMockRecorder) IsDir(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFileSystemService)(nil).IsDir), ctx, path)
}

// IsExecutable mocks base method.
func (m *MockFileSystemService) IsExecutable(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExecutable", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExecutable indicates an expected call of IsExecutable.
func (mr *MockFileSystemServiceMockRecorder) IsExecutable(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExecutable", reflect.TypeOf((*MockFileSystemService)(nil).IsExecutable), ctx, path)
}

// IsFile mocks base method.
func (m *MockFileSystemService) IsFile(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFile", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFile indicates an expected call of IsFile.
func (mr *MockFileSystemServiceMockRecorder) IsFile(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFile", reflect.TypeOf((*MockFileSystemService)(nil).IsFile), ctx, path)
}

// IsReadable mocks base method.
func (m *MockFileSystemService) IsReadable(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadable", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadable indicates an expected call of IsReadable.
func (mr *MockFileSystemServiceMockRecorder) IsReadable(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadable", reflect.TypeOf((*MockFileSystemService)(nil).IsReadable), ctx, path)
}

// IsWritable mocks base method.
func (m *MockFileSystemService) IsWritable(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWritable", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWritable indicates an expected call of IsWritable.
func (mr *MockFileSystemServiceMockRecorder) IsWritable(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWritable", reflect.TypeOf((*MockFileSystemService)(nil).IsWritable), ctx, path)
}

// Join mocks base method.
func (m *MockFileSystemService) Join(paths ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockFileSystemServiceMockRecorder) Join(paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockFileSystemService)(nil).Join), paths...)
}

// ListArchive mocks base method.
func (m *MockFileSystemService) ListArchive(ctx context.Context, archivePath string) ([]filesystem.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchive", ctx, archivePath)
	ret0, _ := ret[0].([]filesystem.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchive indicates an expected call of ListArchive.
func (mr *MockFileSystemServiceMockRecorder) ListArchive(ctx, archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchive", reflect.TypeOf((*MockFileSystemService)(nil).ListArchive), ctx, archivePath)
}

// ListBackups mocks base method.
func (m *MockFileSystemService) ListBackups(ctx context.Context, path string) ([]filesystem.BackupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", ctx, path)
	ret0, _ := ret[0].([]filesystem.BackupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockFileSystemServiceMockRecorder) ListBackups(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockFileSystemService)(nil).ListBackups), ctx, path)
}

// ListDir mocks base method.
func (m *MockFileSystemService) ListDir(ctx context.Context, path string) ([]filesystem.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDir", ctx, path)
	ret0, _ := ret[0].([]filesystem.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDir indicates an expected call of ListDir.
func (mr *MockFileSystemServiceMockRecorder) ListDir(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDir", reflect.TypeOf((*MockFileSystemService)(nil).ListDir), ctx, path)
}

// MkdirAll mocks base method.
func (m *MockFileSystemService) MkdirAll(ctx context.Context, path string, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", ctx, path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileSystemServiceMockRecorder) MkdirAll(ctx, path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystemService)(nil).MkdirAll), ctx, path, perm)
}

// MoveFile mocks base method.
func (m *MockFileSystemService) MoveFile(ctx context.Context, src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFile", ctx, src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFile indicates an expected call of MoveFile.
func (mr *MockFileSystemServiceMockRecorder) MoveFile(ctx, src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFile", reflect.TypeOf((*MockFileSystemService)(nil).MoveFile), ctx, src, dst)
}

// OpenFile mocks base method.
func (m *MockFileSystemService) OpenFile(ctx context.Context, name string, flag int, perm fs.FileMode) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", ctx, name, flag, perm)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileSystemServiceMockRecorder) OpenFile(ctx, name, flag, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileSystemService)(nil).OpenFile), ctx, name, flag, perm)
}

// ReadFile mocks base method.
func (m *MockFileSystemService) ReadFile(ctx context.Context, filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileSystemServiceMockRecorder) ReadFile(ctx, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystemService)(nil).ReadFile), ctx, filename)
}

// ReadSymlink mocks base method.
func (m *MockFileSystemService) ReadSymlink(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSymlink", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSymlink indicates an expected call of ReadSymlink.
func (mr *MockFileSystemServiceMockRecorder) ReadSymlink(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSymlink", reflect.TypeOf((*MockFileSystemService)(nil).ReadSymlink), ctx, name)
}

// RemoveAll mocks base method.
func (m *MockFileSystemService) RemoveAll(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileSystemServiceMockRecorder) RemoveAll(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileSystemService)(nil).RemoveAll), ctx, path)
}

// RemovePath mocks base method.
func (m *MockFileSystemService) RemovePath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePath indicates an expected call of RemovePath.
func (mr *MockFileSystemServiceMockRecorder) RemovePath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePath", reflect.TypeOf((*MockFileSystemService)(nil).RemovePath), ctx, path)
}

// RestoreBackup mocks base method.
func (m *MockFileSystemService) RestoreBackup(ctx context.Context, backupPath, destPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreBackup", ctx, backupPath, destPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreBackup indicates an expected call of RestoreBackup.
func (mr *MockFileSystemServiceMockRecorder) RestoreBackup(ctx, backupPath, destPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBackup", reflect.TypeOf((*MockFileSystemService)(nil).RestoreBackup), ctx, backupPath, destPath)
}

// SearchWithFilters mocks base method.
func (m *MockFileSystemService) SearchWithFilters(ctx context.Context, root string, filters filesystem.SearchFilters) ([]filesystem.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWithFilters", ctx, root, filters)
	ret0, _ := ret[0].([]filesystem.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithFilters indicates an expected call of SearchWithFilters.
func (mr *MockFileSystemServiceMockRecorder) SearchWithFilters(ctx, root, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithFilters", reflect.TypeOf((*MockFileSystemService)(nil).SearchWithFilters), ctx, root, filters)
}

// SetPermissions mocks base method.
func (m *MockFileSystemService) SetPermissions(ctx context.Context, path string, mode fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPermissions", ctx, path, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPermissions indicates an expected call of SetPermissions.
func (mr *MockFileSystemServiceMockRecorder) SetPermissions(ctx, path, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermissions", reflect.TypeOf((*MockFileSystemService)(nil).SetPermissions), ctx, path, mode)
}

// Stop mocks base method.
func (m *MockFileSystemService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockFileSystemServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockFileSystemService)(nil).Stop))
}

// TempDir mocks base method.
func (m *MockFileSystemService) TempDir(ctx context.Context, dir, pattern string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDir", ctx, dir, pattern)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempDir indicates an expected call of TempDir.
func (mr *MockFileSystemServiceMockRecorder) TempDir(ctx, dir, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDir", reflect.TypeOf((*MockFileSystemService)(nil).TempDir), ctx, dir, pattern)
}

// TempFile mocks base method.
func (m *MockFileSystemService) TempFile(ctx context.Context, dir, pattern string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempFile", ctx, dir, pattern)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempFile indicates an expected call of TempFile.
func (mr *MockFileSystemServiceMockRecorder) TempFile(ctx, dir, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempFile", reflect.TypeOf((*MockFileSystemService)(nil).TempFile), ctx, dir, pattern)
}

// VerifyBackup mocks base method.
func (m *MockFileSystemService) VerifyBackup(ctx context.Context, backupPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyBackup", ctx, backupPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyBackup indicates an expected call of VerifyBackup.
func (mr *MockFileSystemServiceMockRecorder) VerifyBackup(ctx, backupPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBackup", reflect.TypeOf((*MockFileSystemService)(nil).VerifyBackup), ctx, backupPath)
}

// WalkDir mocks base method.
func (m *MockFileSystemService) WalkDir(ctx context.Context, root string, fn func(string, filesystem.FileInfo, error) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkDir", ctx, root, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkDir indicates an expected call of WalkDir.
func (mr *MockFileSystemServiceMockRecorder) WalkDir(ctx, root, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDir", reflect.TypeOf((*MockFileSystemService)(nil).WalkDir), ctx, root, fn)
}

// Watch mocks base method.
func (m *MockFileSystemService) Watch(ctx context.Context, paths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockFileSystemServiceMockRecorder) Watch(ctx, paths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockFileSystemService)(nil).Watch), ctx, paths)
}

// WriteFile mocks base method.
func (m *MockFileSystemService) WriteFile(ctx context.Context, filename string, data []byte, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileSystemServiceMockRecorder) WriteFile(ctx, filename, data, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileSystemService)(nil).WriteFile), ctx, filename, data, perm)
}
