// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/github/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/github/interfaces.go -destination=pkg/github/mocks/github_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	github "github.com/Gizzahub/gzh-cli/pkg/github"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHTTPClient) Delete(ctx context.Context, url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHTTPClientMockRecorder) Delete(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPClient)(nil).Delete), ctx, url)
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}

// Get mocks base method.
func (m *MockHTTPClient) Get(ctx context.Context, url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), ctx, url)
}

// Patch mocks base method.
func (m *MockHTTPClient) Patch(ctx context.Context, url, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockHTTPClientMockRecorder) Patch(ctx, url, contentType, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockHTTPClient)(nil).Patch), ctx, url, contentType, body)
}

// Post mocks base method.
func (m *MockHTTPClient) Post(ctx context.Context, url, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPClientMockRecorder) Post(ctx, url, contentType, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), ctx, url, contentType, body)
}

// Put mocks base method.
func (m *MockHTTPClient) Put(ctx context.Context, url, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHTTPClientMockRecorder) Put(ctx, url, contentType, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHTTPClient)(nil).Put), ctx, url, contentType, body)
}

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
	isgomock struct{}
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// GetDefaultBranch mocks base method.
func (m *MockAPIClient) GetDefaultBranch(ctx context.Context, owner, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch", ctx, owner, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockAPIClientMockRecorder) GetDefaultBranch(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockAPIClient)(nil).GetDefaultBranch), ctx, owner, repo)
}

// GetRateLimit mocks base method.
func (m *MockAPIClient) GetRateLimit(ctx context.Context) (*github.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimit", ctx)
	ret0, _ := ret[0].(*github.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimit indicates an expected call of GetRateLimit.
func (mr *MockAPIClientMockRecorder) GetRateLimit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimit", reflect.TypeOf((*MockAPIClient)(nil).GetRateLimit), ctx)
}

// GetRepository mocks base method.
func (m *MockAPIClient) GetRepository(ctx context.Context, owner, repo string) (*github.RepositoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockAPIClientMockRecorder) GetRepository(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockAPIClient)(nil).GetRepository), ctx, owner, repo)
}

// GetRepositoryConfiguration mocks base method.
func (m *MockAPIClient) GetRepositoryConfiguration(ctx context.Context, owner, repo string) (*github.RepositoryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryConfiguration", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryConfiguration indicates an expected call of GetRepositoryConfiguration.
func (mr *MockAPIClientMockRecorder) GetRepositoryConfiguration(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryConfiguration", reflect.TypeOf((*MockAPIClient)(nil).GetRepositoryConfiguration), ctx, owner, repo)
}

// ListOrganizationRepositories mocks base method.
func (m *MockAPIClient) ListOrganizationRepositories(ctx context.Context, org string) ([]github.RepositoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRepositories", ctx, org)
	ret0, _ := ret[0].([]github.RepositoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRepositories indicates an expected call of ListOrganizationRepositories.
func (mr *MockAPIClientMockRecorder) ListOrganizationRepositories(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRepositories", reflect.TypeOf((*MockAPIClient)(nil).ListOrganizationRepositories), ctx, org)
}

// SetToken mocks base method.
func (m *MockAPIClient) SetToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", token)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockAPIClientMockRecorder) SetToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockAPIClient)(nil).SetToken), token)
}

// UpdateRepositoryConfiguration mocks base method.
func (m *MockAPIClient) UpdateRepositoryConfiguration(ctx context.Context, owner, repo string, config *github.RepositoryConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryConfiguration", ctx, owner, repo, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepositoryConfiguration indicates an expected call of UpdateRepositoryConfiguration.
func (mr *MockAPIClientMockRecorder) UpdateRepositoryConfiguration(ctx, owner, repo, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryConfiguration", reflect.TypeOf((*MockAPIClient)(nil).UpdateRepositoryConfiguration), ctx, owner, repo, config)
}

// MockCloneService is a mock of CloneService interface.
type MockCloneService struct {
	ctrl     *gomock.Controller
	recorder *MockCloneServiceMockRecorder
	isgomock struct{}
}

// MockCloneServiceMockRecorder is the mock recorder for MockCloneService.
type MockCloneServiceMockRecorder struct {
	mock *MockCloneService
}

// NewMockCloneService creates a new mock instance.
func NewMockCloneService(ctrl *gomock.Controller) *MockCloneService {
	mock := &MockCloneService{ctrl: ctrl}
	mock.recorder = &MockCloneServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloneService) EXPECT() *MockCloneServiceMockRecorder {
	return m.recorder
}

// CloneOrganization mocks base method.
func (m *MockCloneService) CloneOrganization(ctx context.Context, orgName, targetPath, strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneOrganization", ctx, orgName, targetPath, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneOrganization indicates an expected call of CloneOrganization.
func (mr *MockCloneServiceMockRecorder) CloneOrganization(ctx, orgName, targetPath, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneOrganization", reflect.TypeOf((*MockCloneService)(nil).CloneOrganization), ctx, orgName, targetPath, strategy)
}

// CloneRepository mocks base method.
func (m *MockCloneService) CloneRepository(ctx context.Context, repo github.RepositoryInfo, targetPath, strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneRepository", ctx, repo, targetPath, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneRepository indicates an expected call of CloneRepository.
func (mr *MockCloneServiceMockRecorder) CloneRepository(ctx, repo, targetPath, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRepository", reflect.TypeOf((*MockCloneService)(nil).CloneRepository), ctx, repo, targetPath, strategy)
}

// GetSupportedStrategies mocks base method.
func (m *MockCloneService) GetSupportedStrategies() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedStrategies")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedStrategies indicates an expected call of GetSupportedStrategies.
func (mr *MockCloneServiceMockRecorder) GetSupportedStrategies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedStrategies", reflect.TypeOf((*MockCloneService)(nil).GetSupportedStrategies))
}

// RefreshAll mocks base method.
func (m *MockCloneService) RefreshAll(ctx context.Context, targetPath, orgName, strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAll", ctx, targetPath, orgName, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshAll indicates an expected call of RefreshAll.
func (mr *MockCloneServiceMockRecorder) RefreshAll(ctx, targetPath, orgName, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAll", reflect.TypeOf((*MockCloneService)(nil).RefreshAll), ctx, targetPath, orgName, strategy)
}

// SetStrategy mocks base method.
func (m *MockCloneService) SetStrategy(strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStrategy", strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStrategy indicates an expected call of SetStrategy.
func (mr *MockCloneServiceMockRecorder) SetStrategy(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStrategy", reflect.TypeOf((*MockCloneService)(nil).SetStrategy), strategy)
}

// MockTokenValidatorInterface is a mock of TokenValidatorInterface interface.
type MockTokenValidatorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenValidatorInterfaceMockRecorder
	isgomock struct{}
}

// MockTokenValidatorInterfaceMockRecorder is the mock recorder for MockTokenValidatorInterface.
type MockTokenValidatorInterfaceMockRecorder struct {
	mock *MockTokenValidatorInterface
}

// NewMockTokenValidatorInterface creates a new mock instance.
func NewMockTokenValidatorInterface(ctrl *gomock.Controller) *MockTokenValidatorInterface {
	mock := &MockTokenValidatorInterface{ctrl: ctrl}
	mock.recorder = &MockTokenValidatorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenValidatorInterface) EXPECT() *MockTokenValidatorInterfaceMockRecorder {
	return m.recorder
}

// GetRequiredScopes mocks base method.
func (m *MockTokenValidatorInterface) GetRequiredScopes(operation string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredScopes", operation)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRequiredScopes indicates an expected call of GetRequiredScopes.
func (mr *MockTokenValidatorInterfaceMockRecorder) GetRequiredScopes(operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredScopes", reflect.TypeOf((*MockTokenValidatorInterface)(nil).GetRequiredScopes), operation)
}

// ValidateForOperation mocks base method.
func (m *MockTokenValidatorInterface) ValidateForOperation(ctx context.Context, token, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateForOperation", ctx, token, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateForOperation indicates an expected call of ValidateForOperation.
func (mr *MockTokenValidatorInterfaceMockRecorder) ValidateForOperation(ctx, token, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateForOperation", reflect.TypeOf((*MockTokenValidatorInterface)(nil).ValidateForOperation), ctx, token, operation)
}

// ValidateForRepository mocks base method.
func (m *MockTokenValidatorInterface) ValidateForRepository(ctx context.Context, token, owner, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateForRepository", ctx, token, owner, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateForRepository indicates an expected call of ValidateForRepository.
func (mr *MockTokenValidatorInterfaceMockRecorder) ValidateForRepository(ctx, token, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateForRepository", reflect.TypeOf((*MockTokenValidatorInterface)(nil).ValidateForRepository), ctx, token, owner, repo)
}

// ValidateToken mocks base method.
func (m *MockTokenValidatorInterface) ValidateToken(ctx context.Context, token string) (*github.TokenInfoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(*github.TokenInfoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenValidatorInterfaceMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenValidatorInterface)(nil).ValidateToken), ctx, token)
}

// MockChangeLoggerInterface is a mock of ChangeLoggerInterface interface.
type MockChangeLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChangeLoggerInterfaceMockRecorder
	isgomock struct{}
}

// MockChangeLoggerInterfaceMockRecorder is the mock recorder for MockChangeLoggerInterface.
type MockChangeLoggerInterfaceMockRecorder struct {
	mock *MockChangeLoggerInterface
}

// NewMockChangeLoggerInterface creates a new mock instance.
func NewMockChangeLoggerInterface(ctrl *gomock.Controller) *MockChangeLoggerInterface {
	mock := &MockChangeLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockChangeLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeLoggerInterface) EXPECT() *MockChangeLoggerInterfaceMockRecorder {
	return m.recorder
}

// GetOperationHistory mocks base method.
func (m *MockChangeLoggerInterface) GetOperationHistory(ctx context.Context, filters github.LogFilters) ([]github.LogOperationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationHistory", ctx, filters)
	ret0, _ := ret[0].([]github.LogOperationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationHistory indicates an expected call of GetOperationHistory.
func (mr *MockChangeLoggerInterfaceMockRecorder) GetOperationHistory(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationHistory", reflect.TypeOf((*MockChangeLoggerInterface)(nil).GetOperationHistory), ctx, filters)
}

// LogOperation mocks base method.
func (m *MockChangeLoggerInterface) LogOperation(ctx context.Context, operation github.LogOperationRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOperation", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOperation indicates an expected call of LogOperation.
func (mr *MockChangeLoggerInterfaceMockRecorder) LogOperation(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOperation", reflect.TypeOf((*MockChangeLoggerInterface)(nil).LogOperation), ctx, operation)
}

// SetLogLevel mocks base method.
func (m *MockChangeLoggerInterface) SetLogLevel(level github.LogLevelType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", level)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockChangeLoggerInterfaceMockRecorder) SetLogLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockChangeLoggerInterface)(nil).SetLogLevel), level)
}

// MockConfirmationServiceInterface is a mock of ConfirmationServiceInterface interface.
type MockConfirmationServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfirmationServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockConfirmationServiceInterfaceMockRecorder is the mock recorder for MockConfirmationServiceInterface.
type MockConfirmationServiceInterfaceMockRecorder struct {
	mock *MockConfirmationServiceInterface
}

// NewMockConfirmationServiceInterface creates a new mock instance.
func NewMockConfirmationServiceInterface(ctrl *gomock.Controller) *MockConfirmationServiceInterface {
	mock := &MockConfirmationServiceInterface{ctrl: ctrl}
	mock.recorder = &MockConfirmationServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfirmationServiceInterface) EXPECT() *MockConfirmationServiceInterfaceMockRecorder {
	return m.recorder
}

// ConfirmBulkOperation mocks base method.
func (m *MockConfirmationServiceInterface) ConfirmBulkOperation(ctx context.Context, operations []github.OperationRecord) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmBulkOperation", ctx, operations)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmBulkOperation indicates an expected call of ConfirmBulkOperation.
func (mr *MockConfirmationServiceInterfaceMockRecorder) ConfirmBulkOperation(ctx, operations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmBulkOperation", reflect.TypeOf((*MockConfirmationServiceInterface)(nil).ConfirmBulkOperation), ctx, operations)
}

// ConfirmOperation mocks base method.
func (m *MockConfirmationServiceInterface) ConfirmOperation(ctx context.Context, prompt *github.ConfirmationPromptRecord) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmOperation", ctx, prompt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmOperation indicates an expected call of ConfirmOperation.
func (mr *MockConfirmationServiceInterfaceMockRecorder) ConfirmOperation(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmOperation", reflect.TypeOf((*MockConfirmationServiceInterface)(nil).ConfirmOperation), ctx, prompt)
}

// SetConfirmationMode mocks base method.
func (m *MockConfirmationServiceInterface) SetConfirmationMode(mode github.ConfirmationModeType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfirmationMode", mode)
}

// SetConfirmationMode indicates an expected call of SetConfirmationMode.
func (mr *MockConfirmationServiceInterfaceMockRecorder) SetConfirmationMode(mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfirmationMode", reflect.TypeOf((*MockConfirmationServiceInterface)(nil).SetConfirmationMode), mode)
}

// MockGitHubService is a mock of GitHubService interface.
type MockGitHubService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceMockRecorder
	isgomock struct{}
}

// MockGitHubServiceMockRecorder is the mock recorder for MockGitHubService.
type MockGitHubServiceMockRecorder struct {
	mock *MockGitHubService
}

// NewMockGitHubService creates a new mock instance.
func NewMockGitHubService(ctrl *gomock.Controller) *MockGitHubService {
	mock := &MockGitHubService{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubService) EXPECT() *MockGitHubServiceMockRecorder {
	return m.recorder
}

// CloneOrganization mocks base method.
func (m *MockGitHubService) CloneOrganization(ctx context.Context, orgName, targetPath, strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneOrganization", ctx, orgName, targetPath, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneOrganization indicates an expected call of CloneOrganization.
func (mr *MockGitHubServiceMockRecorder) CloneOrganization(ctx, orgName, targetPath, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneOrganization", reflect.TypeOf((*MockGitHubService)(nil).CloneOrganization), ctx, orgName, targetPath, strategy)
}

// CloneRepository mocks base method.
func (m *MockGitHubService) CloneRepository(ctx context.Context, repo github.RepositoryInfo, targetPath, strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneRepository", ctx, repo, targetPath, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloneRepository indicates an expected call of CloneRepository.
func (mr *MockGitHubServiceMockRecorder) CloneRepository(ctx, repo, targetPath, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRepository", reflect.TypeOf((*MockGitHubService)(nil).CloneRepository), ctx, repo, targetPath, strategy)
}

// ConfirmBulkOperation mocks base method.
func (m *MockGitHubService) ConfirmBulkOperation(ctx context.Context, operations []github.OperationRecord) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmBulkOperation", ctx, operations)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmBulkOperation indicates an expected call of ConfirmBulkOperation.
func (mr *MockGitHubServiceMockRecorder) ConfirmBulkOperation(ctx, operations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmBulkOperation", reflect.TypeOf((*MockGitHubService)(nil).ConfirmBulkOperation), ctx, operations)
}

// ConfirmOperation mocks base method.
func (m *MockGitHubService) ConfirmOperation(ctx context.Context, prompt *github.ConfirmationPromptRecord) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmOperation", ctx, prompt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmOperation indicates an expected call of ConfirmOperation.
func (mr *MockGitHubServiceMockRecorder) ConfirmOperation(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmOperation", reflect.TypeOf((*MockGitHubService)(nil).ConfirmOperation), ctx, prompt)
}

// GetDefaultBranch mocks base method.
func (m *MockGitHubService) GetDefaultBranch(ctx context.Context, owner, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch", ctx, owner, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockGitHubServiceMockRecorder) GetDefaultBranch(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockGitHubService)(nil).GetDefaultBranch), ctx, owner, repo)
}

// GetOperationHistory mocks base method.
func (m *MockGitHubService) GetOperationHistory(ctx context.Context, filters github.LogFilters) ([]github.LogOperationRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationHistory", ctx, filters)
	ret0, _ := ret[0].([]github.LogOperationRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationHistory indicates an expected call of GetOperationHistory.
func (mr *MockGitHubServiceMockRecorder) GetOperationHistory(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationHistory", reflect.TypeOf((*MockGitHubService)(nil).GetOperationHistory), ctx, filters)
}

// GetRateLimit mocks base method.
func (m *MockGitHubService) GetRateLimit(ctx context.Context) (*github.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimit", ctx)
	ret0, _ := ret[0].(*github.RateLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimit indicates an expected call of GetRateLimit.
func (mr *MockGitHubServiceMockRecorder) GetRateLimit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimit", reflect.TypeOf((*MockGitHubService)(nil).GetRateLimit), ctx)
}

// GetRepository mocks base method.
func (m *MockGitHubService) GetRepository(ctx context.Context, owner, repo string) (*github.RepositoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockGitHubServiceMockRecorder) GetRepository(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGitHubService)(nil).GetRepository), ctx, owner, repo)
}

// GetRepositoryConfiguration mocks base method.
func (m *MockGitHubService) GetRepositoryConfiguration(ctx context.Context, owner, repo string) (*github.RepositoryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryConfiguration", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryConfiguration indicates an expected call of GetRepositoryConfiguration.
func (mr *MockGitHubServiceMockRecorder) GetRepositoryConfiguration(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryConfiguration", reflect.TypeOf((*MockGitHubService)(nil).GetRepositoryConfiguration), ctx, owner, repo)
}

// GetRequiredScopes mocks base method.
func (m *MockGitHubService) GetRequiredScopes(operation string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredScopes", operation)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRequiredScopes indicates an expected call of GetRequiredScopes.
func (mr *MockGitHubServiceMockRecorder) GetRequiredScopes(operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredScopes", reflect.TypeOf((*MockGitHubService)(nil).GetRequiredScopes), operation)
}

// GetSupportedStrategies mocks base method.
func (m *MockGitHubService) GetSupportedStrategies() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedStrategies")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedStrategies indicates an expected call of GetSupportedStrategies.
func (mr *MockGitHubServiceMockRecorder) GetSupportedStrategies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedStrategies", reflect.TypeOf((*MockGitHubService)(nil).GetSupportedStrategies))
}

// ListOrganizationRepositories mocks base method.
func (m *MockGitHubService) ListOrganizationRepositories(ctx context.Context, org string) ([]github.RepositoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationRepositories", ctx, org)
	ret0, _ := ret[0].([]github.RepositoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationRepositories indicates an expected call of ListOrganizationRepositories.
func (mr *MockGitHubServiceMockRecorder) ListOrganizationRepositories(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationRepositories", reflect.TypeOf((*MockGitHubService)(nil).ListOrganizationRepositories), ctx, org)
}

// LogOperation mocks base method.
func (m *MockGitHubService) LogOperation(ctx context.Context, operation github.LogOperationRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOperation", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOperation indicates an expected call of LogOperation.
func (mr *MockGitHubServiceMockRecorder) LogOperation(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOperation", reflect.TypeOf((*MockGitHubService)(nil).LogOperation), ctx, operation)
}

// RefreshAll mocks base method.
func (m *MockGitHubService) RefreshAll(ctx context.Context, targetPath, orgName, strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAll", ctx, targetPath, orgName, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshAll indicates an expected call of RefreshAll.
func (mr *MockGitHubServiceMockRecorder) RefreshAll(ctx, targetPath, orgName, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAll", reflect.TypeOf((*MockGitHubService)(nil).RefreshAll), ctx, targetPath, orgName, strategy)
}

// SetConfirmationMode mocks base method.
func (m *MockGitHubService) SetConfirmationMode(mode github.ConfirmationModeType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfirmationMode", mode)
}

// SetConfirmationMode indicates an expected call of SetConfirmationMode.
func (mr *MockGitHubServiceMockRecorder) SetConfirmationMode(mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfirmationMode", reflect.TypeOf((*MockGitHubService)(nil).SetConfirmationMode), mode)
}

// SetLogLevel mocks base method.
func (m *MockGitHubService) SetLogLevel(level github.LogLevelType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", level)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockGitHubServiceMockRecorder) SetLogLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockGitHubService)(nil).SetLogLevel), level)
}

// SetStrategy mocks base method.
func (m *MockGitHubService) SetStrategy(strategy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStrategy", strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStrategy indicates an expected call of SetStrategy.
func (mr *MockGitHubServiceMockRecorder) SetStrategy(strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStrategy", reflect.TypeOf((*MockGitHubService)(nil).SetStrategy), strategy)
}

// SetToken mocks base method.
func (m *MockGitHubService) SetToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", token)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockGitHubServiceMockRecorder) SetToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockGitHubService)(nil).SetToken), token)
}

// UpdateRepositoryConfiguration mocks base method.
func (m *MockGitHubService) UpdateRepositoryConfiguration(ctx context.Context, owner, repo string, config *github.RepositoryConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryConfiguration", ctx, owner, repo, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepositoryConfiguration indicates an expected call of UpdateRepositoryConfiguration.
func (mr *MockGitHubServiceMockRecorder) UpdateRepositoryConfiguration(ctx, owner, repo, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryConfiguration", reflect.TypeOf((*MockGitHubService)(nil).UpdateRepositoryConfiguration), ctx, owner, repo, config)
}

// ValidateForOperation mocks base method.
func (m *MockGitHubService) ValidateForOperation(ctx context.Context, token, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateForOperation", ctx, token, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateForOperation indicates an expected call of ValidateForOperation.
func (mr *MockGitHubServiceMockRecorder) ValidateForOperation(ctx, token, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateForOperation", reflect.TypeOf((*MockGitHubService)(nil).ValidateForOperation), ctx, token, operation)
}

// ValidateForRepository mocks base method.
func (m *MockGitHubService) ValidateForRepository(ctx context.Context, token, owner, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateForRepository", ctx, token, owner, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateForRepository indicates an expected call of ValidateForRepository.
func (mr *MockGitHubServiceMockRecorder) ValidateForRepository(ctx, token, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateForRepository", reflect.TypeOf((*MockGitHubService)(nil).ValidateForRepository), ctx, token, owner, repo)
}

// ValidateToken mocks base method.
func (m *MockGitHubService) ValidateToken(ctx context.Context, token string) (*github.TokenInfoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(*github.TokenInfoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockGitHubServiceMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockGitHubService)(nil).ValidateToken), ctx, token)
}
