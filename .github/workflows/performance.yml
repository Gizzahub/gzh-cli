name: Performance Benchmarks

# 동시 실행 제어: 성능 테스트는 순차적으로 실행
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # 성능 테스트는 취소하지 않고 완료

# Global environment variables for caching
env:
  GO_VERSION_FILE: go.mod
  CACHE_VERSION: v1

on:
  pull_request:
    branches: [master, main, develop]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

  push:
    branches: [master, main, develop]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

  workflow_dispatch:
    inputs:
      package_pattern:
        description: 'Package pattern to benchmark'
        required: false
        default: './...'
      regression_threshold:
        description: 'Performance regression threshold (%)'
        required: false
        default: '15.0'

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: ${{ env.GO_VERSION_FILE }}
        cache: true

    - name: Enhanced Go modules caching
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ env.CACHE_VERSION }}-go-ubuntu-latest-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-go-ubuntu-latest-

    - name: Cache benchstat tool
      uses: actions/cache@v4
      with:
        path: ~/go/bin/benchstat
        key: ${{ env.CACHE_VERSION }}-benchstat-${{ runner.os }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-benchstat-

    - name: Install dependencies
      run: go mod download

    - name: Compile check
      run: |
        echo "Checking if all packages compile..."
        go build -v ./...
        echo "Checking if tests compile (per package)..."
        for pkg in $(go list ./...); do
          echo "Testing compilation for $pkg"
          go test -c "$pkg" -o /dev/null || echo "⚠️ Test compilation failed for $pkg"
        done
        echo "✅ Compilation checks completed!"

    - name: Install benchstat
      run: |
        if [ ! -f ~/go/bin/benchstat ]; then
          echo "Installing benchstat..."
          go install golang.org/x/perf/cmd/benchstat@latest
        else
          echo "Using cached benchstat"
        fi

    - name: Run benchmarks
      run: |
        PACKAGE_PATTERN="${{ github.event.inputs.package_pattern || './...' }}"
        echo "Running benchmarks for: $PACKAGE_PATTERN"

        # Run benchmarks multiple times for statistical significance
        for i in {1..5}; do
          echo "Benchmark run $i/5"
          go test -bench=. -benchmem -run=^$ $PACKAGE_PATTERN >> benchmark_$i.txt
        done

    - name: Generate benchmark report
      run: |
        echo "# Performance Benchmark Report" > benchmark_report.md
        echo "" >> benchmark_report.md
        echo "**Commit:** \`${{ github.sha }}\`" >> benchmark_report.md
        echo "**Date:** $(date)" >> benchmark_report.md
        echo "" >> benchmark_report.md

        # Combine all benchmark results
        cat benchmark_*.txt > all_benchmarks.txt

        # Generate summary
        echo "## Benchmark Results" >> benchmark_report.md
        echo "\`\`\`" >> benchmark_report.md
        benchstat all_benchmarks.txt >> benchmark_report.md
        echo "\`\`\`" >> benchmark_report.md

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          benchmark_*.txt
          benchmark_report.md
          all_benchmarks.txt

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('benchmark_report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
