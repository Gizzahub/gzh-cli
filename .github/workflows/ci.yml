name: CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]

permissions:
  contents: read
  security-events: write
  pull-requests: write

env:
  GO_VERSION: "1.24"

jobs:
  # 🧪 통합 테스트 & 커버리지
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go mod download && go mod verify

      - name: Run tests with coverage
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  # 🔍 통합 품질 검사
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # 포맷 체크
      - name: Format check
        run: |
          go install mvdan.cc/gofumpt@latest
          test -z "$(gofumpt -l .)"

      # 최신 버전 golangci-lint
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --config .golangci.yml --timeout=10m

      # 보안 스캔
      - name: Security scan
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec.sarif ./...

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
        if: always()

  # 🔨 빌드 검증
  build:
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build all commands
        run: |
          # 메인 바이너리
          go build -ldflags="-s -w" -o gz .

          # 개별 명령어들
          go build -o git-synclone ./cmd/git-synclone
          go build -o actions-policy ./cmd/actions-policy

      - name: Test binaries
        run: |
          ./gz version
          ./git-synclone --version
          ./actions-policy --version

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            gz
            git-synclone
            actions-policy
