name: CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

# Global environment variables for caching
env:
  GO_VERSION_FILE: go.mod
  CACHE_VERSION: v1

jobs:
  # üß™ ÌÜµÌï© ÌÖåÏä§Ìä∏ & Ïª§Î≤ÑÎ¶¨ÏßÄ
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Enhanced Go modules caching
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ env.CACHE_VERSION }}-go-${{ matrix.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-go-${{ matrix.os }}-

      - name: Install dependencies
        run: go mod download && go mod verify

      - name: Run tests with coverage
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          flags: unittests

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  # üîç ÌÜµÌï© ÌíàÏßà Í≤ÄÏÇ¨
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}
          cache: true

      - name: Enhanced Go modules caching
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ env.CACHE_VERSION }}-go-ubuntu-latest-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-go-ubuntu-latest-

      - name: Cache tool binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/bin
            ~/go/bin
          key: ${{ env.CACHE_VERSION }}-tools-${{ runner.os }}-${{ hashFiles('Makefile') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-tools-${{ runner.os }}-

      - name: Install dependencies
        run: go mod download

      - name: Verify AGENTS guidelines
        run: |
          if [ -f scripts/check-agents.sh ]; then
            chmod +x scripts/check-agents.sh
            scripts/check-agents.sh
          else
            echo "‚ö†Ô∏è AGENTS check script not found, skipping"
          fi

      # Ìè¨Îß∑ Ï≤¥ÌÅ¨ (Make ÌÉÄÍ≤ü ÏÇ¨Ïö©)
      - name: Format check
        run: make format-strict

      # Î¶∞Ìä∏ Ï≤¥ÌÅ¨ (Make ÌÉÄÍ≤ü ÏÇ¨Ïö©)
      - name: golangci-lint
        run: make lint-check

      # Î≥¥Ïïà Ïä§Ï∫î (Make ÌÉÄÍ≤ü ÏÇ¨Ïö©)
      - name: Security scan
        run: make security-json

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-report.json
        if: always() && hashFiles('gosec-report.json') != ''

  # üî® ÎπåÎìú Í≤ÄÏ¶ù
  build:
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}
          cache: true

      - name: Enhanced Go modules caching
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ env.CACHE_VERSION }}-go-ubuntu-latest-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-go-ubuntu-latest-

      - name: Install dependencies
        run: go mod download

      - name: Compile check
        run: |
          echo "Checking if all packages compile..."
          go build -v ./...
          echo "Checking if tests compile (per package)..."
          for pkg in $(go list ./...); do
            echo "Testing compilation for $pkg"
            go test -c "$pkg" -o /dev/null || echo "‚ö†Ô∏è Test compilation failed for $pkg"
          done
          echo "‚úÖ Compilation checks completed!"

      - name: Build all commands
        run: |
          echo "üî® Building main binary..."
          go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o gz .

          echo "üî® Building command binaries..."
          go build -ldflags="-s -w" -o git-synclone ./cmd/git-synclone
          go build -ldflags="-s -w" -o actions-policy ./cmd/actions-policy

      - name: Test binary functionality
        run: |
          echo "üß™ Testing binary versions..."
          ./gz version || echo "‚ö†Ô∏è Main binary version check failed"
          ./git-synclone --version || echo "‚ö†Ô∏è git-synclone version check failed"
          ./actions-policy --version || echo "‚ö†Ô∏è actions-policy version check failed"

          echo "üß™ Testing basic commands..."
          ./gz --help > /dev/null || echo "‚ö†Ô∏è Main binary help failed"
          ./gz dev-env --help > /dev/null || echo "‚ö†Ô∏è dev-env help failed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ github.sha }}
          path: |
            gz
            git-synclone
            actions-policy
