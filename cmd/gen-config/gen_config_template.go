// Copyright (c) 2025 Archmagece
// SPDX-License-Identifier: MIT

package genconfig

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
)

type genConfigTemplateOptions struct {
	outputFile string
	force      bool
}

func defaultGenConfigTemplateOptions() *genConfigTemplateOptions {
	return &genConfigTemplateOptions{
		outputFile: "bulk-clone.yaml",
		force:      false,
	}
}

func newGenConfigTemplateCmd() *cobra.Command {
	o := defaultGenConfigTemplateOptions()

	cmd := &cobra.Command{
		Use:   "template <template-name>",
		Short: "Generate configuration from predefined templates",
		Long: `Generate a bulk-clone.yaml configuration file from predefined templates.

Available templates:
  simple         - Basic configuration with one GitHub organization
  comprehensive  - Complete example with multiple providers and features
  work          - Work-focused configuration with company repositories
  personal      - Personal configuration for open source contributions
  multi-org     - Multi-organization setup with different protocols

Examples:
  # Generate simple template
  gz gen-config template simple
  
  # Generate comprehensive template to custom file
  gz gen-config template comprehensive --output my-config.yaml
  
  # Force overwrite existing file
  gz gen-config template work --force`,
		Args:       cobra.ExactArgs(1),
		ValidArgs:  []string{"simple", "comprehensive", "work", "personal", "multi-org"},
		ArgAliases: []string{"template-name"},
		RunE:       o.run,
	}

	cmd.Flags().StringVarP(&o.outputFile, "output", "o", o.outputFile, "Output configuration file")
	cmd.Flags().BoolVarP(&o.force, "force", "f", o.force, "Force overwrite existing file")

	return cmd
}

func (o *genConfigTemplateOptions) run(_ *cobra.Command, args []string) error {
	templateName := args[0]

	// Check if output file exists
	if !o.force {
		if _, err := os.Stat(o.outputFile); err == nil {
			return fmt.Errorf("configuration file already exists: %s (use --force to overwrite)", o.outputFile)
		}
	}

	// Generate template content
	content, err := o.generateTemplate(templateName)
	if err != nil {
		return err
	}

	// Write to file
	err = os.WriteFile(o.outputFile, []byte(content), 0o600)
	if err != nil {
		return fmt.Errorf("failed to write configuration file: %w", err)
	}

	fmt.Printf("âœ… Configuration template '%s' generated: %s\n", templateName, o.outputFile)

	return nil
}

func (o *genConfigTemplateOptions) generateTemplate(templateName string) (string, error) {
	switch templateName {
	case "simple":
		return o.generateSimpleTemplate(), nil
	case "comprehensive":
		return o.generateComprehensiveTemplate(), nil
	case "work":
		return o.generateWorkTemplate(), nil
	case "personal":
		return o.generatePersonalTemplate(), nil
	case "multi-org":
		return o.generateMultiOrgTemplate(), nil
	default:
		return "", fmt.Errorf("unknown template: %s", templateName)
	}
}

func (o *genConfigTemplateOptions) generateSimpleTemplate() string {
	return `# Simple bulk-clone.yaml Configuration
# Generated by gzh-manager gen-config template simple

version: "0.1"

# Global default settings
default:
  protocol: https
  github:
    root_path: "$HOME/github-repos"
  gitlab:
    root_path: "$HOME/gitlab-repos"

# Repository configurations
repo_roots:
  - root_path: "$HOME/repos/myorg"
    provider: "github"
    protocol: "https"
    org_name: "myorg"

# Ignore test and archived repositories
ignore_names:
  - "test-.*"
  - ".*-archive"
`
}

func (o *genConfigTemplateOptions) generateComprehensiveTemplate() string {
	return `# Comprehensive bulk-clone.yaml Configuration
# Generated by gzh-manager gen-config template comprehensive
# This template demonstrates all available configuration options

version: "0.1"

# Global default settings
default:
  protocol: https
  github:
    root_path: "$HOME/github-repos"
  gitlab:
    root_path: "$HOME/gitlab-repos"

# Repository configurations for different organizations
repo_roots:
  # Company GitHub repositories (SSH for private access)
  - root_path: "$HOME/work/mycompany"
    provider: "github"
    protocol: "ssh"
    org_name: "mycompany"
  
  # Open source GitHub repositories (HTTPS for public access)
  - root_path: "$HOME/opensource/kubernetes"
    provider: "github"
    protocol: "https"
    org_name: "kubernetes"
  
  # Personal GitHub repositories
  - root_path: "$HOME/personal/github"
    provider: "github"
    protocol: "ssh"
    org_name: "myusername"
  
  # GitLab group repositories
  - root_path: "$HOME/gitlab/mygroup"
    provider: "gitlab"
    protocol: "ssh"
    org_name: "mygroup"
  
  # Gitea organization repositories
  - root_path: "$HOME/gitea/myorg"
    provider: "gitea"
    protocol: "https"
    org_name: "myorg"

# Global ignore patterns for repositories
ignore_names:
  - "^test-.*"          # Repositories starting with 'test-'
  - ".*-archive$"       # Repositories ending with '-archive'
  - "^temp.*"           # Repositories starting with 'temp'
  - ".*-deprecated$"    # Deprecated repositories
  - "^\\."              # Hidden repositories (starting with .)
  - ".*-example$"       # Example repositories
  - ".*-demo$"          # Demo repositories
`
}

func (o *genConfigTemplateOptions) generateWorkTemplate() string {
	return `# Work-focused bulk-clone.yaml Configuration
# Generated by gzh-manager gen-config template work

version: "0.1"

# Global default settings (SSH for company repositories)
default:
  protocol: ssh
  github:
    root_path: "$HOME/work/github"
  gitlab:
    root_path: "$HOME/work/gitlab"

# Work repository configurations
repo_roots:
  # Main company organization
  - root_path: "$HOME/work/company"
    provider: "github"
    protocol: "ssh"
    org_name: "company"
  
  # DevOps and infrastructure repositories
  - root_path: "$HOME/work/devops"
    provider: "github"
    protocol: "ssh"
    org_name: "company-devops"
  
  # Internal GitLab groups
  - root_path: "$HOME/work/internal"
    provider: "gitlab"
    protocol: "ssh"
    org_name: "internal-group"

# Ignore test, demo, and archived repositories
ignore_names:
  - "^test-.*"
  - ".*-test$"
  - ".*-demo$"
  - ".*-example$"
  - ".*-archive$"
  - ".*-deprecated$"
  - "^poc-.*"           # Proof of concept repositories
  - ".*-sandbox$"       # Sandbox repositories
`
}

func (o *genConfigTemplateOptions) generatePersonalTemplate() string {
	return `# Personal bulk-clone.yaml Configuration
# Generated by gzh-manager gen-config template personal

version: "0.1"

# Global default settings
default:
  protocol: https
  github:
    root_path: "$HOME/github"
  gitlab:
    root_path: "$HOME/gitlab"

# Personal repository configurations
repo_roots:
  # Your personal GitHub repositories
  - root_path: "$HOME/personal/github"
    provider: "github"
    protocol: "ssh"
    org_name: "yourusername"
  
  # Open source contributions
  - root_path: "$HOME/opensource/kubernetes"
    provider: "github"
    protocol: "https"
    org_name: "kubernetes"
  
  - root_path: "$HOME/opensource/golang"
    provider: "github"
    protocol: "https"
    org_name: "golang"
  
  - root_path: "$HOME/opensource/docker"
    provider: "github"
    protocol: "https"
    org_name: "docker"
  
  # Personal GitLab projects
  - root_path: "$HOME/personal/gitlab"
    provider: "gitlab"
    protocol: "ssh"
    org_name: "yourusername"

# Ignore forks and experimental repositories
ignore_names:
  - "^fork-.*"
  - ".*-fork$"
  - "^experiment-.*"
  - ".*-playground$"
  - "^learn-.*"
  - ".*-tutorial$"
  - "test-.*"
  - ".*-archive"
`
}

func (o *genConfigTemplateOptions) generateMultiOrgTemplate() string {
	return `# Multi-organization bulk-clone.yaml Configuration
# Generated by gzh-manager gen-config template multi-org

version: "0.1"

# Global default settings
default:
  protocol: https
  github:
    root_path: "$HOME/github"
  gitlab:
    root_path: "$HOME/gitlab"

# Multiple organization configurations
repo_roots:
  # Company organizations
  - root_path: "$HOME/work/company"
    provider: "github"
    protocol: "ssh"
    org_name: "company"
  
  - root_path: "$HOME/work/company-labs"
    provider: "github"
    protocol: "ssh"
    org_name: "company-labs"
  
  # Client organizations
  - root_path: "$HOME/clients/client1"
    provider: "github"
    protocol: "ssh"
    org_name: "client1"
  
  - root_path: "$HOME/clients/client2"
    provider: "gitlab"
    protocol: "ssh"
    org_name: "client2-group"
  
  # Open source organizations
  - root_path: "$HOME/opensource/kubernetes"
    provider: "github"
    protocol: "https"
    org_name: "kubernetes"
  
  - root_path: "$HOME/opensource/hashicorp"
    provider: "github"
    protocol: "https"
    org_name: "hashicorp"
  
  - root_path: "$HOME/opensource/gitlab-org"
    provider: "gitlab"
    protocol: "https"
    org_name: "gitlab-org"
  
  # Personal repositories
  - root_path: "$HOME/personal"
    provider: "github"
    protocol: "ssh"
    org_name: "yourusername"

# Comprehensive ignore patterns
ignore_names:
  - "^test-.*"
  - ".*-test$"
  - ".*-demo$"
  - ".*-example$"
  - ".*-archive$"
  - ".*-deprecated$"
  - "^poc-.*"
  - ".*-sandbox$"
  - "^fork-.*"
  - ".*-fork$"
  - "^temp.*"
  - ".*-backup$"
`
}
