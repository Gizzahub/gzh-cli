package docker

// Go Dockerfile template
const goDockerfileTemplate = `# Generated by GZH Manager - Go Multi-stage Dockerfile
{{if .IncludeMultiArch}}# syntax=docker/dockerfile:1
{{end}}
# Build stage
FROM --platform=$BUILDPLATFORM {{.Project.BaseImage}} AS builder

# Set build arguments
{{range .BuildArgs}}ARG {{.}}
{{end}}

WORKDIR /build

# Install security scanning tools (build stage)
{{if .IncludeScanning}}RUN apk add --no-cache curl git
RUN curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
{{end}}

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

{{if .IncludeScanning}}# Run security scans during build
RUN trivy fs --exit-code 1 --no-progress --severity HIGH,CRITICAL .
{{end}}

# Build the application
RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH:-amd64} \
    go build -ldflags="-w -s" -o app ./cmd/{{.Project.Name}}

# Final stage
FROM alpine:latest AS final

# Install runtime dependencies and security tools
RUN apk add --no-cache \
    ca-certificates \
    curl \
    tzdata \
    {{if .IncludeScanning}}\
    && curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN adduser -D -s /bin/sh {{.User}}

WORKDIR {{.Workdir}}

# Copy binary from builder stage
COPY --from=builder /build/app .

# Set ownership
RUN chown -R {{.User}}:{{.User}} {{.Workdir}}

# Switch to non-root user
USER {{.User}}

# Expose port
EXPOSE {{.Project.Port}}

# Health check
{{.HealthCheck}}

# Run the application
CMD ["./app"]`

// Node.js Dockerfile template
const nodeDockerfileTemplate = `# Generated by GZH Manager - Node.js Multi-stage Dockerfile
{{if .IncludeMultiArch}}# syntax=docker/dockerfile:1
{{end}}
# Build stage
FROM --platform=$BUILDPLATFORM {{.Project.BaseImage}} AS builder

# Set build arguments
{{range .BuildArgs}}ARG {{.}}
{{end}}

WORKDIR /build

# Install build dependencies and security tools
{{if .IncludeScanning}}RUN apk add --no-cache curl git
RUN curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
{{end}}

# Copy package files first for better caching
COPY package*.json ./
{{if .Project.HasPackageJSON}}RUN npm ci --only=production --silent
{{end}}

# Copy source code
COPY . .

{{if .IncludeScanning}}# Run security scans
RUN npm audit --audit-level high
RUN grype . --fail-on high
{{end}}

# Build the application
RUN npm run build || true

# Final stage
FROM {{.Project.BaseImage}} AS final

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    tini \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/cache/apk/*

WORKDIR {{.Workdir}}

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production --silent && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /build/dist ./dist
COPY --from=builder /build/src ./src

# Switch to non-root user
USER {{.User}}

# Expose port
EXPOSE {{.Project.Port}}

# Health check
{{.HealthCheck}}

# Use tini as init process
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "src/index.js"]`

// Python Dockerfile template
const pythonDockerfileTemplate = `# Generated by GZH Manager - Python Multi-stage Dockerfile
{{if .IncludeMultiArch}}# syntax=docker/dockerfile:1
{{end}}
# Build stage
FROM --platform=$BUILDPLATFORM {{.Project.BaseImage}} AS builder

# Set build arguments
{{range .BuildArgs}}ARG {{.}}
{{end}}

WORKDIR /build

# Install build dependencies and security tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
{{if .Project.HasRequirements}}COPY requirements.txt ./
RUN pip install --no-cache-dir --user -r requirements.txt
{{end}}

# Copy source code
COPY . .

{{if .IncludeScanning}}# Run security scans
RUN pip-audit || true
RUN grype . --fail-on high
{{end}}

# Final stage
FROM {{.Project.BaseImage}} AS final

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash {{.User}}

WORKDIR {{.Workdir}}

# Copy Python packages from builder
COPY --from=builder /root/.local /home/{{.User}}/.local

# Copy application
COPY . .

# Set ownership
RUN chown -R {{.User}}:{{.User}} {{.Workdir}}

# Switch to non-root user
USER {{.User}}

# Add local bin to PATH
ENV PATH=/home/{{.User}}/.local/bin:$PATH

# Expose port
EXPOSE {{.Project.Port}}

# Health check
{{.HealthCheck}}

# Run the application
CMD ["python", "app.py"]`

// Ruby Dockerfile template
const rubyDockerfileTemplate = `# Generated by GZH Manager - Ruby Multi-stage Dockerfile
{{if .IncludeMultiArch}}# syntax=docker/dockerfile:1
{{end}}
# Build stage
FROM --platform=$BUILDPLATFORM {{.Project.BaseImage}} AS builder

# Set build arguments
{{range .BuildArgs}}ARG {{.}}
{{end}}

WORKDIR /build

# Install build dependencies and security tools
RUN apk add --no-cache \
    build-base \
    curl \
    git \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/cache/apk/*

# Install Ruby gems
{{if .Project.HasGemfile}}COPY Gemfile Gemfile.lock ./
RUN bundle install --deployment --without development test
{{end}}

# Copy source code
COPY . .

{{if .IncludeScanning}}# Run security scans
RUN bundle audit check --update || true
RUN grype . --fail-on high
{{end}}

# Final stage
FROM {{.Project.BaseImage}} AS final

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/cache/apk/*

WORKDIR {{.Workdir}}

# Copy gems from builder
COPY --from=builder /usr/local/bundle /usr/local/bundle

# Copy application
COPY . .

# Switch to non-root user
USER {{.User}}

# Expose port
EXPOSE {{.Project.Port}}

# Health check
{{.HealthCheck}}

# Run the application
CMD ["ruby", "app.rb"]`

// Rust Dockerfile template
const rustDockerfileTemplate = `# Generated by GZH Manager - Rust Multi-stage Dockerfile
{{if .IncludeMultiArch}}# syntax=docker/dockerfile:1
{{end}}
# Build stage
FROM --platform=$BUILDPLATFORM {{.Project.BaseImage}} AS builder

# Set build arguments
{{range .BuildArgs}}ARG {{.}}
{{end}}

WORKDIR /build

# Install build dependencies and security tools
RUN apk add --no-cache \
    musl-dev \
    curl \
    git \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/cache/apk/*

# Copy Cargo files first for better caching
{{if .Project.HasCargoToml}}COPY Cargo.toml Cargo.lock ./
RUN cargo fetch
{{end}}

# Copy source code
COPY . .

{{if .IncludeScanning}}# Run security scans
RUN cargo audit || true
RUN grype . --fail-on high
{{end}}

# Build the application
RUN cargo build --release --target-dir=/build/target

# Final stage
FROM alpine:latest AS final

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    curl \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN adduser -D -s /bin/sh {{.User}}

WORKDIR {{.Workdir}}

# Copy binary from builder stage
COPY --from=builder /build/target/release/{{.Project.Name}} ./app

# Set ownership
RUN chown -R {{.User}}:{{.User}} {{.Workdir}}

# Switch to non-root user
USER {{.User}}

# Expose port
EXPOSE {{.Project.Port}}

# Health check
{{.HealthCheck}}

# Run the application
CMD ["./app"]`

// Java Dockerfile template
const javaDockerfileTemplate = `# Generated by GZH Manager - Java Multi-stage Dockerfile
{{if .IncludeMultiArch}}# syntax=docker/dockerfile:1
{{end}}
# Build stage
FROM --platform=$BUILDPLATFORM {{.Project.BaseImage}} AS builder

# Set build arguments
{{range .BuildArgs}}ARG {{.}}
{{end}}

WORKDIR /build

# Install build dependencies and security tools
{{if .IncludeScanning}}RUN apt-get update && apt-get install -y --no-install-recommends curl \
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    && rm -rf /var/lib/apt/lists/*
{{end}}

# Copy build files
{{if .Project.HasPomXML}}COPY pom.xml ./
RUN mvn dependency:go-offline
{{else if .Project.HasBuildGradle}}COPY build.gradle gradle.properties gradlew ./
COPY gradle ./gradle
RUN ./gradlew dependencies
{{end}}

# Copy source code
COPY . .

{{if .IncludeScanning}}# Run security scans
{{if .Project.HasPomXML}}RUN mvn org.owasp:dependency-check-maven:check || true
{{else if .Project.HasBuildGradle}}RUN ./gradlew dependencyCheckAnalyze || true
{{end}}RUN grype . --fail-on high
{{end}}

# Build the application
{{if .Project.HasPomXML}}RUN mvn clean package -DskipTests
{{else if .Project.HasBuildGradle}}RUN ./gradlew build -x test
{{end}}

# Final stage
FROM openjdk:21-jre-slim AS final

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash {{.User}}

WORKDIR {{.Workdir}}

# Copy JAR from builder stage
{{if .Project.HasPomXML}}COPY --from=builder /build/target/*.jar app.jar
{{else if .Project.HasBuildGradle}}COPY --from=builder /build/build/libs/*.jar app.jar
{{end}}

# Set ownership
RUN chown -R {{.User}}:{{.User}} {{.Workdir}}

# Switch to non-root user
USER {{.User}}

# Expose port
EXPOSE {{.Project.Port}}

# Health check
{{.HealthCheck}}

# Run the application
CMD ["java", "-jar", "app.jar"]`

// Generic Dockerfile template
const genericDockerfileTemplate = `# Generated by GZH Manager - Generic Multi-stage Dockerfile
{{if .IncludeMultiArch}}# syntax=docker/dockerfile:1
{{end}}
# Build stage
FROM --platform=$BUILDPLATFORM {{.Project.BaseImage}} AS builder

# Set build arguments
{{range .BuildArgs}}ARG {{.}}
{{end}}

WORKDIR /build

# Install security tools
{{if .IncludeScanning}}RUN apk add --no-cache curl \
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
{{end}}

# Copy source code
COPY . .

{{if .IncludeScanning}}# Run security scans
RUN grype . --fail-on high
{{end}}

# Add your build steps here
# RUN your-build-command

# Final stage
FROM alpine:latest AS final

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    {{if .IncludeScanning}}\
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin \
    {{end}}\
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN adduser -D -s /bin/sh {{.User}}

WORKDIR {{.Workdir}}

# Copy application from builder stage
COPY --from=builder /build .

# Set ownership
RUN chown -R {{.User}}:{{.User}} {{.Workdir}}

# Switch to non-root user
USER {{.User}}

# Expose port
EXPOSE {{.Project.Port}}

# Add appropriate health check for your application
# {{.HealthCheck}}

# Run the application
CMD ["your-app-command"]`

// getDockerignoreTemplate returns appropriate .dockerignore content based on language
func getDockerignoreTemplate(language string) string {
	base := `# Generated by GZH Manager
# OS and Editor files
.DS_Store
.vscode/
.idea/
*.swp
*.swo
*~

# Git
.git/
.gitignore

# Documentation
README.md
*.md
docs/

# CI/CD
.github/
.gitlab-ci.yml
Jenkinsfile

# Security
.env
*.key
*.pem
*.p12
secrets/

# Docker
Dockerfile*
.dockerignore
docker-compose*.yml

# Logs
*.log
logs/

# Temporary files
tmp/
temp/
*.tmp

`

	switch language {
	case "go":
		return base + `# Go specific
*.mod
*.sum
vendor/
bin/
*.exe
coverage.out
`

	case "node":
		return base + `# Node.js specific
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.yarn-integrity
coverage/
.nyc_output
`

	case "python":
		return base + `# Python specific
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
pip-log.txt
pip-delete-this-directory.txt
.pytest_cache/
htmlcov/
.coverage
.coverage.*
`

	case "ruby":
		return base + `# Ruby specific
*.gem
*.rbc
/.config
/coverage/
/InstalledFiles
/pkg/
/spec/reports/
/spec/examples.txt
/test/tmp/
/test/version_tmp/
/tmp/
.bundle/
vendor/bundle
/.yardoc/
/_yardoc/
/doc/
/rdoc/
`

	case "rust":
		return base + `# Rust specific
target/
Cargo.lock
**/*.rs.bk
*.pdb
`

	case "java":
		return base + `# Java specific
*.class
*.jar
*.war
*.ear
*.nar
target/
build/
.gradle/
gradle-app.setting
!gradle-wrapper.jar
.gradletasknamecache
`

	default:
		return base
	}
}
