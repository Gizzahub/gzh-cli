# gzh-manager unified configuration example
# This file demonstrates the complete configuration structure for all commands
# Generated: 2024-01-01 00:00:00
# Version: 1.0.0
# Documentation: https://github.com/gizzahub/gzh-manager-go/docs/configuration.md

version: "1.0.0"
default_provider: github

# Global settings that apply to all commands
global:
  clone_base_dir: "$HOME/repos"
  default_strategy: reset
  default_visibility: all
  global_ignores:
    - "*.log"
    - "*.tmp"
    - ".DS_Store"
  timeouts:
    http_timeout: 30s
    git_timeout: 5m
    rate_limit_timeout: 1h
  concurrency:
    clone_workers: 10
    update_workers: 15
    api_workers: 5

# Provider configurations for Git hosting services
providers:
  github:
    token: "${GITHUB_TOKEN}"
    organizations:
      - name: "myorg"
        clone_dir: "$HOME/repos/github/myorg"
        visibility: all
        strategy: reset
        include: "^(backend|frontend|mobile)-.*"
        exclude:
          - ".*-archive$"
          - ".*-deprecated$"
        flatten: false
        repo_management:
          enabled: true
          templates:
            - "security-template"
            - "opensource-template"
          branch_protection:
            enabled: true
            branches:
              - "main"
              - "develop"
            require_status_checks: true
            require_pr_reviews: true
          security:
            vulnerability_alerts: true
            automated_security_fixes: true
            required_policies:
              - "security-policy"
              - "code-review-policy"
    settings:
      rate_limit:
        requests_per_hour: 5000
        burst_limit: 50
        auto_detect: true
      retry:
        max_attempts: 3
        base_delay: 1s
        max_delay: 30s
        exponential_backoff: true
      auth:
        token_env_var: "GITHUB_TOKEN"
        use_ssh: true
        ssh_key_path: "$HOME/.ssh/id_ed25519"

  gitlab:
    token: "${GITLAB_TOKEN}"
    api_url: "https://gitlab.example.com/api/v4"
    organizations:
      - name: "mygroup"
        clone_dir: "$HOME/repos/gitlab/mygroup"
        visibility: private
        strategy: pull
        recursive: true
        repo_management:
          enabled: false
    settings:
      rate_limit:
        requests_per_hour: 2000
        burst_limit: 30
        auto_detect: true
      retry:
        max_attempts: 3
        base_delay: 2s
        max_delay: 60s
        exponential_backoff: true

  gitea:
    token: "${GITEA_TOKEN}"
    api_url: "https://gitea.example.com/api/v1"
    organizations:
      - name: "myorganization"
        clone_dir: "$HOME/repos/gitea/myorganization"
        visibility: all
        strategy: reset

# IDE monitoring and management configuration
ide:
  enabled: true
  watch_directories:
    - "$HOME/.config"
    - "$HOME/.local/share/JetBrains"
    - "$HOME/Library/Application Support/JetBrains"
  exclude_patterns:
    - "\.git/.*"
    - "node_modules/.*"
    - "\.DS_Store"
    - "\.idea/workspace\.xml"
    - "\.idea/tasks\.xml"
  jetbrains_products:
    - "IntelliJ"
    - "PyCharm"
    - "GoLand"
    - "WebStorm"
    - "PhpStorm"
    - "RubyMine"
    - "CLion"
    - "DataGrip"
  auto_fix_sync: true
  sync_settings:
    enabled: true
    interval: 5m
    sync_types:
      - "keymap"
      - "editor"
      - "ui"
      - "plugins"
      - "code-style"
      - "live-templates"
    backup_before_sync: true
  logging:
    level: info
    file_path: "$HOME/.local/share/gzh-manager/logs/ide.log"
    console: true
    rotation:
      max_size_mb: 10
      max_backups: 5
      max_age_days: 30
      compress: true

# Development environment configuration
dev_env:
  enabled: true
  backup_location: "$HOME/.gz/backups"
  auto_backup: true
  providers:
    aws:
      default_profile: default
      preferred_regions:
        - us-west-2
        - us-east-1
        - eu-west-1
      credentials_file: "$HOME/.aws/credentials"
      config_file: "$HOME/.aws/config"
      enable_mfa: false
    gcp:
      default_project: "my-project-id"
      service_account_key: "$HOME/.config/gcp/service-account.json"
      preferred_regions:
        - us-central1
        - us-west1
        - europe-west1
      use_adc: true
    azure:
      default_subscription: "my-subscription-id"
      default_tenant: "my-tenant-id"
      preferred_regions:
        - westus2
        - eastus
        - westeurope
      use_managed_identity: false
  containers:
    default_runtime: docker
    docker:
      socket_path: /var/run/docker.sock
      default_registry: docker.io
      registry_auth:
        docker.io:
          username: "${DOCKER_USERNAME}"
          password: "${DOCKER_PASSWORD}"
        ghcr.io:
          username: "${GITHUB_USERNAME}"
          password: "${GITHUB_TOKEN}"
        "registry.example.com":
          username: "${REGISTRY_USERNAME}"
          password: "${REGISTRY_PASSWORD}"
      build_options:
        default_context: "."
        build_args:
          NODE_ENV: production
          BUILD_VERSION: "${BUILD_VERSION}"
        target: production
        enable_buildkit: true
    podman:
      socket_path: /run/user/1000/podman/podman.sock
      remote_connections:
        production:
          host: "podman.example.com"
          port: 22
          identity: "$HOME/.ssh/id_ed25519"
          use_ssh: true
      default_connection: local
  kubernetes:
    kubeconfig_path: "$HOME/.kube/config"
    default_context: "development"
    default_namespace: default
    auto_discovery: true
    clusters:
      development:
        server: "https://dev-k8s.example.com"
        auth_method: token
        auth_config:
          token: "${K8S_DEV_TOKEN}"
      production:
        server: "https://prod-k8s.example.com"
        auth_method: certificate
        auth_config:
          client_certificate: "$HOME/.kube/prod-client.crt"
          client_key: "$HOME/.kube/prod-client.key"
  backup:
    enabled: true
    interval: 24h
    retention_period: 720h  # 30 days
    compression: gzip
    destinations:
      - "/backup/dev-env"
      - "s3://my-backup-bucket/dev-env"
    encryption:
      enabled: true
      method: aes256
      key_path: "$HOME/.gz/backup-key"

# Network environment configuration (CLI-based)
net_env:
  enabled: true
  # Network profiles for manual switching (no automatic monitoring)
  # Use: gz net-env switch <profile-name>
  network_profiles:
    home:
      name: "home"
      description: "Home network configuration"
      dns:
        servers:
          - "192.168.1.1"
          - "1.1.1.1"
        method: "resolvectl"
      proxy:
        clear: true
      vpn:
        disconnect:
          - "work-vpn"
      scripts:
        post_switch:
          - "echo 'Switched to home network'"

    office:
      name: "office"
      description: "Office network with corporate VPN"
      vpn:
        connect:
          - name: "work-vpn"
            type: "networkmanager"
        disconnect:
          - "personal-vpn"
      dns:
        servers:
          - "10.0.0.1"
          - "10.0.0.2"
        method: "resolvectl"
      proxy:
        http: "http://proxy.company.com:8080"
        https: "http://proxy.company.com:8080"
        no_proxy:
          - "localhost"
          - "127.0.0.1"
          - "*.company.com"
      scripts:
        pre_switch:
          - "echo 'Connecting to office network...'"
        post_switch:
          - "echo 'Connected to office network'"

    public:
      name: "public"
      description: "Public WiFi with VPN for security"
      vpn:
        connect:
          - name: "personal-vpn"
            type: "wireguard"
            config: "/etc/wireguard/personal.conf"
      dns:
        servers:
          - "1.1.1.1"
          - "1.0.0.1"
        method: "resolvectl"
      proxy:
        clear: true
      scripts:
        post_switch:
          - "echo 'Secure connection established'"

# SSH configuration management
ssh_config:
  enabled: true
  config_file: "$HOME/.ssh/config"
  backup_enabled: true
  backup_dir: "$HOME/.ssh/backups"
  provider_configs:
    github:
      hostname: "github.com"
      user: git
      port: 22
      identity_file: "$HOME/.ssh/id_ed25519"
      host_alias: "gh"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
        IdentitiesOnly: "yes"
    gitlab:
      hostname: "gitlab.com"
      user: git
      port: 22
      identity_file: "$HOME/.ssh/id_ed25519"
      host_alias: "gl"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
        IdentitiesOnly: "yes"
    gitea:
      hostname: "gitea.example.com"
      user: git
      port: 22
      identity_file: "$HOME/.ssh/id_ed25519"
      host_alias: "gt"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
        IdentitiesOnly: "yes"
    corporate:
      hostname: "git.company.com"
      user: git
      port: 2222
      identity_file: "$HOME/.ssh/id_rsa_corporate"
      host_alias: "corp"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
        IdentitiesOnly: "yes"
  key_management:
    enabled: true
    key_dir: "$HOME/.ssh"
    default_key_type: ed25519
    default_key_size: 4096
    use_ssh_agent: true
    ssh_agent_socket: "$SSH_AUTH_SOCK"
  host_aliases:
    gh:
      real_hostname: "github.com"
      user: git
      port: 22
      identity_file: "$HOME/.ssh/id_ed25519"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
    gl:
      real_hostname: "gitlab.com"
      user: git
      port: 22
      identity_file: "$HOME/.ssh/id_ed25519"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
    gt:
      real_hostname: "gitea.example.com"
      user: git
      port: 22
      identity_file: "$HOME/.ssh/id_ed25519"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
    corp:
      real_hostname: "git.company.com"
      user: git
      port: 2222
      identity_file: "$HOME/.ssh/id_rsa_corporate"
      options:
        StrictHostKeyChecking: "yes"
        UserKnownHostsFile: "$HOME/.ssh/known_hosts"
        ProxyJump: "jumphost.company.com"

# Migration information (automatically added during migration)
migration:
  source_format: "bulk-clone.yaml"
  migration_date: "2024-01-01T00:00:00Z"
  source_path: "/home/user/bulk-clone.yaml"
  tool_version: "1.0.0"
