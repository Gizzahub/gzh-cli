# Comprehensive synclone.yaml Example
# ===========================================
# This file demonstrates all available configuration options for gzh-manager synclone
#
# Configuration File Locations (searched in order):
# 1. $GZH_CONFIG_PATH (environment variable)
# 2. ./synclone.yaml or ./synclone.yml
# 3. ~/.config/gzh-manager/synclone.yaml
# 4. /etc/gzh-manager/synclone.yaml

# Schema version (required)
version: "0.1"

# Global Default Settings
# -----------------------
# These settings apply to all providers unless overridden in specific configurations
default:
  # Default protocol for Git operations
  # Options: http, https, ssh
  protocol: https

  # GitHub-specific defaults
  github:
    # Base directory for GitHub repositories
    # Supports environment variables like $HOME, $USER
    root_path: "$HOME/repos/github"

    # Provider identifier (do not change)
    provider: "github"

    # Default protocol (can be overridden per organization)
    protocol: ""

    # Default organization name (usually left empty)
    org_name: ""

  # GitLab-specific defaults
  gitlab:
    # Base directory for GitLab repositories
    root_path: "$HOME/repos/gitlab"

    # Provider identifier (do not change)
    provider: "gitlab"

    # GitLab instance URL (for self-hosted instances)
    url: "https://gitlab.com"

    # Whether to clone subgroups recursively
    recursive: false

    # Default protocol (can be overridden per group)
    protocol: ""

    # Default group name (usually left empty)
    group_name: ""

# Repository Root Configurations
# ------------------------------
# Define specific configurations for different organizations
# Note: Currently only GitHub organizations are supported in repo_roots
repo_roots:
  # Example 1: Company GitHub organization using SSH
  - root_path: "$HOME/work/mycompany"
    provider: "github"
    protocol: "ssh" # Use SSH for private repos
    org_name: "mycompany"

  # Example 2: Open source GitHub organization using HTTPS
  - root_path: "$HOME/opensource/kubernetes"
    provider: "github"
    protocol: "https" # HTTPS for public repos
    org_name: "kubernetes"

  # Example 3: Personal GitHub repos
  - root_path: "$HOME/personal/github"
    provider: "github"
    protocol: "ssh"
    org_name: "myusername" # Your GitHub username

  # Example 4: Another open source project
  - root_path: "$HOME/opensource/golang"
    provider: "github"
    protocol: "https"
    org_name: "golang"

  # Example 5: Work-related tools
  - root_path: "$HOME/work/devtools"
    provider: "github"
    protocol: "ssh"
    org_name: "company-devtools"

# Global Ignore Patterns
# ----------------------
# Repository names matching these patterns will be ignored
# Uses Go regex syntax
ignore_names:
  - "^test-.*" # Repos starting with 'test-'
  - ".*-archive$" # Repos ending with '-archive'
  - "^temp.*" # Repos starting with 'temp'
  - ".*-deprecated$" # Deprecated repositories
  - "^\\." # Hidden repositories (starting with .)

# ============================================
# ADVANCED CONFIGURATION (Planned Features)
# ============================================
# The following sections show planned features that are not yet implemented
# but demonstrate the intended configuration structure

# Per-Organization Advanced Configuration
# github:
#   # Organization with custom settings
#   mycompany:
#     auth: token                  # Authentication method: token, ssh, or basic
#     proto: ssh                   # Protocol override
#     targetPath: "$HOME/work/mycompany"
#
#     # Default strategy for this organization
#     default:
#       strategy: include          # Strategy: include or exclude
#       branch: main               # Default branch to checkout
#
#     # Specific repositories to include (when strategy is 'include')
#     include:
#       api-server:
#         branch: develop          # Override branch for specific repo
#       web-frontend:
#         branch: main
#       mobile-app:
#         branch: release/2.0
#
#     # Patterns to exclude (when strategy is 'exclude')
#     exclude:
#       - "test-*"                 # Exclude test repositories
#       - "*-legacy"               # Exclude legacy code
#
#   # Another organization with different settings
#   opensource-contrib:
#     auth: ssh
#     proto: ssh
#     targetPath: "$HOME/opensource/contrib"
#     default:
#       strategy: exclude          # Clone all except excluded
#       branch: main
#     exclude:
#       - "fork-*"                 # Don't clone forked repos
#       - "*-example"              # Skip example repos

# GitLab Advanced Configuration (Planned)
# Note: GitLab groups would be configured separately when implemented
# gitlab_groups:
#   - root_path: "$HOME/work/gitlab-internal"
#     provider: "gitlab"
#     protocol: "https"
#     url: "https://gitlab.company.com"
#     group_name: "backend-team"
#     recursive: true
#
#   - root_path: "$HOME/opensource/gitlab"
#     provider: "gitlab"
#     protocol: "https"
#     url: "https://gitlab.com"
#     group_name: "gitlab-org"
#     recursive: false
#
# gitlab:
#   backend-team:
#     auth: token
#     url: "https://gitlab.company.com"
#     targetPath: "$HOME/work/backend"
#     recursive: true              # Include all subgroups
#     default:
#       branch: develop
#     include:
#       microservices/user-service:
#         branch: feature/oauth2
#       microservices/payment-service:
#         branch: main

# Authentication Configuration (Planned)
# auth:
#   tokens:
#     github:
#       default: "${GITHUB_TOKEN}"           # From environment
#       mycompany: "${GITHUB_COMPANY_TOKEN}" # Org-specific token
#     gitlab:
#       default: "${GITLAB_TOKEN}"
#       "gitlab.company.com": "${COMPANY_GITLAB_TOKEN}"
#
#   ssh_keys:
#     default: "~/.ssh/id_rsa"
#     github.com: "~/.ssh/github_rsa"
#     gitlab.company.com: "~/.ssh/company_rsa"

# Sync Strategy Configuration (Planned)
# sync:
#   # Global sync strategy (can be overridden with -s flag)
#   strategy: reset                # Options: reset, pull, fetch
#
#   # Auto-sync configuration
#   auto_sync:
#     enabled: false
#     interval: "6h"               # Sync every 6 hours
#     on_network_change: true      # Sync when network changes

# Hooks Configuration (Planned)
# hooks:
#   # Run commands before/after operations
#   pre_clone:
#     - "echo 'Starting bulk clone operation'"
#   post_clone:
#     - "echo 'Bulk clone completed'"
#   pre_sync:
#     - "git config --global user.email 'bot@company.com'"
#   post_sync:
#     - "notify-send 'Repositories synchronized'"
